{"ast":null,"code":"var _jsxFileName = \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\src\\\\components\\\\Header\\\\Time\\\\TimeList.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport moment from \"moment\";\nimport * as commuteActions from \"store/modules/commute\";\nimport * as headerActions from \"store/modules/Header\";\nimport * as timeActions from \"store/modules/time\";\nimport { bindActionCreators } from \"redux\";\nimport locale from \"locale\";\nlet timer = null;\nlet ary = [];\n\nclass TimeList extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      timeset: \" \"\n    };\n\n    this.getTime = () => {\n      const hour = moment().format(\"HH\");\n      const minute = moment().format(\"mm\");\n      const second = moment().format(\"ss\");\n      const timeset = \"\".concat(hour > 9 ? hour : \"0\".concat(hour), \":\").concat(minute > 9 ? minute : \"0\".concat(minute), \":\").concat(second > 9 ? second : \"0\".concat(second));\n      this.setState({\n        timeset\n      });\n    };\n\n    this.tick = () => {\n      const _this$props = this.props,\n            endTime = _this$props.endTime,\n            preGoTo = _this$props.preGoTo,\n            preGoOff = _this$props.preGoOff,\n            preHoliDay = _this$props.preHoliDay,\n            language = _this$props.language;\n      this.convertState('time', new Date());\n      const now = moment(new Date().getFullYear() + '-' + (new Date().getMonth() + 1) + '-' + new Date().getDate() + \" \" + new Date().getHours() + \":\" + new Date().getMinutes() + \":\" + new Date().getSeconds(), 'YYYY-MM-DD HH:mm:ss');\n      const end = moment(new Date().getFullYear() + '-' + (new Date().getMonth() + 1) + '-' + new Date().getDate() + \" \" + endTime, 'YYYY-MM-DD HH:mm:ss');\n      const night = moment(new Date().getFullYear() + '-' + (new Date().getMonth() + 1) + '-' + (new Date().getDate() + 1) + \" \" + \"00:00:00\", 'YYYY-MM-DD HH:mm:ss');\n\n      if (!preGoTo && preGoOff) {\n        this.convertState('preGoTo', true);\n      }\n\n      if (now.isoWeekday() === 1 || preHoliDay === true) {\n        this.convertState('preGoTo', true);\n        this.convertState('preGoOff', true);\n      }\n\n      if (now.isAfter(night)) {\n        //console.log(\"same\");\n        this.convertState('isNight', true);\n      }\n\n      if (now.isAfter(end)) {\n        //console.log(\"after\");\n        this.convertState('isGoOff', true);\n        this.convertState('isNigiht', false);\n      }\n\n      if (now.isBefore(end)) {\n        //console.log(\"before\");\n        this.convertState('isGoOff', false);\n        this.convertState(\"isNight\", false);\n      }\n    };\n  }\n\n  componentWillMount() {\n    let cnt = 0;\n    const _this$props2 = this.props,\n          auth = _this$props2.auth,\n          CommuteActions = _this$props2.CommuteActions,\n          token = _this$props2.token,\n          loginUserNo = _this$props2.loginUserNo,\n          TimeActions = _this$props2.TimeActions;\n    let name = \"goto\";\n    let value = false;\n    CommuteActions.changeInput({\n      name,\n      value\n    });\n    name = \"gooff\";\n    value = false;\n    CommuteActions.changeInput({\n      name,\n      value\n    });\n    name = \"starttime\";\n    value = \"\";\n    TimeActions.changeInput({\n      name,\n      value\n    });\n    name = \"endtime\";\n    value = \"\";\n    TimeActions.changeInput({\n      name,\n      value\n    });\n\n    if (auth === 'ROLE_USER') {\n      timer = setInterval(() => {\n        const _this$props3 = this.props,\n              endtime = _this$props3.endtime,\n              starttime = _this$props3.starttime,\n              goto = _this$props3.goto,\n              gooff = _this$props3.gooff;\n        cnt++;\n\n        if (starttime === \"\" && goto) {\n          TimeActions.getStartTime(loginUserNo, token);\n        } // //console.log(goto);\n        // //console.log(starttime);\n        // //console.log(endtime);\n        // //console.log(gooff);\n\n\n        if (starttime !== \"\" && endtime === \"\" && gooff) {\n          TimeActions.getTotalWorkTime(loginUserNo, token);\n          TimeActions.getTodayCommuteEndTime(loginUserNo, token);\n          clearInterval(timer);\n        }\n\n        CommuteActions.changeInput({\n          name: 'cnt',\n          value: cnt\n        });\n        this.tick(); // //console.log(\"인터벌~\");\n\n        if (!sessionStorage.getItem(\"id_token\")) {\n          clearInterval(timer);\n        }\n      }, 1000);\n    }\n  }\n\n  convertState(name, value) {\n    const CommuteActions = this.props.CommuteActions;\n    CommuteActions.stateChange({\n      name,\n      value\n    });\n  }\n\n  render() {\n    let state = 0; //지각여부\n\n    let late = false;\n    let now = moment().format('HH:mm:ss');\n    const _this$props4 = this.props,\n          totalWorkTime = _this$props4.totalWorkTime,\n          starttime = _this$props4.starttime,\n          time1 = _this$props4.time1,\n          endtime = _this$props4.endtime,\n          goto = _this$props4.goto,\n          breakTimeList = _this$props4.breakTimeList,\n          language = _this$props4.language,\n          CommuteActions = _this$props4.CommuteActions; //console.log(language);\n    ////console.log(starttime);\n    // //console.log(goto);\n    // //console.log(\"랜더\")\n    //console.log(time1);\n\n    let breaktimeboolean = false;\n    let gotoBreakTime = false;\n    let timeset;\n\n    if (starttime === \"\") {\n      timeset = '00:00:00';\n    } else if (starttime !== \"\") {\n      const selectstarttime = moment(time1, \"HH:mm:ss\");\n      const pushnow = moment(now, \"HH:mm:ss\");\n      let pushstarttime = moment(starttime, \"HH:mm:ss\");\n      const timediff = selectstarttime.diff(pushnow, \"seconds\"); // 출근해야하는시간 - 현재시간    양수이면 근무시간 0 출력 음수이면 계산\n\n      const timediff2 = selectstarttime.diff(pushstarttime, \"seconds\"); // 출근해야하는시간 - 출근시간  양수이면 정상출근 음수이면 지각\n      // 정상 출근이면   출근시간 = 출근해야하는시간 \n      // 지각 이면 출근시간 = 출근한 시간\n      // //console.log(timediff);\n\n      if (timediff > 0) {\n        timeset = \"00:00:00\"; //console.log(\"@@\");\n      } else {\n        let secondsDiff; //정상 출근\n\n        if (timediff2 >= 0) {\n          late = false;\n          secondsDiff = pushnow.diff(selectstarttime, \"seconds\");\n        } //지각 출근\n        else {\n            late = true;\n            secondsDiff = pushnow.diff(pushstarttime, \"seconds\");\n          }\n\n        let total = 0;\n        let breakTime = moment(\"00:00\", \"HH:mm:ss\");\n        if (breakTimeList !== \"\" && ary.length === 0) breakTimeList.map((items, index) => {\n          // console.log(items);\n          ary.push({\n            description: items.description,\n            start: moment(items.start, \"HH:mm:ss\"),\n            end: moment(items.end, \"HH:mm:ss\"),\n            time: moment(items.end, \"HH:mm:ss\").diff(moment(items.start, \"HH:mm:ss\"), \"seconds\")\n          });\n        }); //console.log(ary);\n        // let state=0;\n\n        let breakStartTime = 0;\n        let gotoBreakTimeEnd = 0;\n\n        if (ary.length !== 0) {\n          ary.map((items, index) => {\n            const statediff = items.start.diff(pushnow, \"seconds\");\n            const statediff2 = items.end.diff(pushnow, \"seconds\"); //출근을 휴게시간 도중에 했을때\n\n            if (items.start.diff(pushstarttime) <= 0 && items.end.diff(pushstarttime) >= 0) {\n              //state=2;\n              gotoBreakTimeEnd = items.end;\n              pushstarttime = items.end;\n              gotoBreakTime = true;\n              console.log(\"@@@\");\n            } //else\n            //휴게시간 지나간\n\n\n            if (statediff2 < 0) {\n              // console.log(\"지나간 휴게시간:\"+items.description);\n              //state=0;\n              //출근시간 이후의 breaktime만\n              if (statediff < 0 && items.start.diff(pushstarttime) > 0) breakTime = breakTime.add(items.time, \"seconds\");\n            } //휴게시간\n            else if (statediff <= 0 && statediff2 >= 0) {\n                console.log(\"현재는 휴게시간:\" + items.description);\n                state = 1;\n                breakStartTime = items.start;\n              } //아직 시간 안된 휴게시간\n            //     else if( statediff>0){\n            //         console.log(\"앞으로의 휴게시간:\"+items.description);\n            //         state=2;\n            //    }\n\n          });\n          let selectTime;\n          if (late) selectTime = pushstarttime;else if (late && gotoBreakTime) selectTime = gotoBreakTimeEnd;else selectTime = selectstarttime;\n\n          if (state === 0) {\n            console.log(\"state0\");\n            total = pushnow.diff(selectTime, \"seconds\"); //console.log(total);\n\n            const latehour = Math.floor(total / 3600);\n            const latemin = Math.floor((total - latehour * 3600) / 60);\n            const latesec = total - latehour * 3600 - latemin * 60;\n            timeset = \"\".concat(latehour > 9 ? latehour : \"0\".concat(latehour), \":\").concat(latemin > 9 ? latemin : \"0\".concat(latemin), \":\").concat(latesec > 9 ? latesec : \"0\".concat(latesec));\n            total = moment(timeset, \"HH:mm:ss\").diff(breakTime); //console.log(total);\n          } else if (state === 1) {\n            console.log(gotoBreakTime);\n            console.log(late);\n            console.log(\"state1\");\n            total = breakStartTime.diff(selectTime, \"seconds\");\n            if (total <= 0) total = 0;else {\n              const latehour = Math.floor(total / 3600);\n              const latemin = Math.floor((total - latehour * 3600) / 60);\n              const latesec = total - latehour * 3600 - latemin * 60;\n              timeset = \"\".concat(latehour > 9 ? latehour : \"0\".concat(latehour), \":\").concat(latemin > 9 ? latemin : \"0\".concat(latemin), \":\").concat(latesec > 9 ? latesec : \"0\".concat(latesec));\n              total = moment(timeset, \"HH:mm:ss\").diff(breakTime);\n            } // console.log(total);\n          } else if (state === 2) {\n            console.log(\"State2\");\n            total = pushnow.diff(gotoBreakTimeEnd, \"seconds\"); //// console.log(total);\n            // console.log(total);  \n\n            if (total <= 0) {\n              total = 0;\n              breaktimeboolean = true;\n            } else {\n              const latehour = Math.floor(total / 3600);\n              const latemin = Math.floor((total - latehour * 3600) / 60);\n              const latesec = total - latehour * 3600 - latemin * 60;\n              timeset = \"\".concat(latehour > 9 ? latehour : \"0\".concat(latehour), \":\").concat(latemin > 9 ? latemin : \"0\".concat(latemin), \":\").concat(latesec > 9 ? latesec : \"0\".concat(latesec));\n              total = moment(timeset, \"HH:mm:ss\").diff(breakTime); // console.log(total);  \n            }\n\n            if (total <= 0) total = 0;\n          } //         if(state==2){\n          //         total=pushnow.diff(pushstarttime, \"seconds\")\n          //         const latehour = Math.floor(total / 3600)\n          //     const latemin = Math.floor((total - (latehour * 3600)) / 60)\n          //     const latesec = (total - (latehour * 3600) - (latemin * 60))\n          //     timeset = `${latehour > 9 ? latehour : `0${latehour}`}:${latemin > 9 ? latemin : `0${latemin}`}:${latesec > 9 ? latesec : `0${latesec}`}`;\n          //     total=moment(timeset, \"HH:mm:ss\").diff(breakTime);     \n          //     console.log(total);\n          // }\n          // console.log(breakTime);\n\n        } //휴게시간이 존재x\n        else {\n            total = pushnow.diff(secondsDiff, \"seconds\");\n          } // console.log(total/1000);\n        //if(state!==2)\n\n\n        total = total / 1000;\n        const latehour = Math.floor(total / 3600);\n        const latemin = Math.floor((total - latehour * 3600) / 60);\n        const latesec = total - latehour * 3600 - latemin * 60;\n        timeset = \"\".concat(latehour > 9 ? latehour : \"0\".concat(latehour), \":\").concat(latemin > 9 ? latemin : \"0\".concat(latemin), \":\").concat(latesec > 9 ? latesec : \"0\".concat(latesec));\n        CommuteActions.changeInput({\n          name: \"totalWorkTime\",\n          value: timeset\n        });\n      }\n    } //     let secondsDiff;\n    //   //  //console.log(timediff2);\n    //     if (timediff2 > 0) {\n    //         const startdt = moment(now, \"HH:mm:ss\");\n    //         const enddt = moment(time1, \"HH:mm:ss\");\n    //         secondsDiff = startdt.diff(enddt, \"seconds\");\n    //     } else {\n    //         const startdt = moment(now, \"HH:mm:ss\");\n    //         const enddt = moment(starttime, \"HH:mm:ss\");\n    //         secondsDiff = startdt.diff(enddt, \"seconds\");\n    //     }\n    //     const latehour = Math.floor(secondsDiff / 3600)\n    //     const latemin = Math.floor((secondsDiff - (latehour * 3600)) / 60)\n    //     const latesec = (secondsDiff - (latehour * 3600) - (latemin * 60))\n    //     if (secondsDiff < 0) {\n    //         timeset = \"00:00:00\"\n    //     } else {\n    //         //   //console.log(\"@@@@\");\n    //         timeset = `${latehour > 9 ? latehour : `0${latehour}`}:${latemin > 9 ? latemin : `0${latemin}`}:${latesec > 9 ? latesec : `0${latesec}`}`;\n    //         }\n    //     }\n    // }\n\n\n    if (endtime === \"\" && state == 1 || state == 2 && breaktimeboolean) return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 21\n      }\n    }, timeset, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 35\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 40\n      }\n    }, /*#__PURE__*/React.createElement(\"h6\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 45\n      }\n    }, locale.timeset[language])));else if (endtime === \"\" && (state == 0 || state == 2)) return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 21\n      }\n    }, timeset);else return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 20\n      }\n    }, totalWorkTime);\n  }\n\n}\n\nexport default connect(state => ({\n  loginUserNo: state.login.no,\n  token: state.login.token,\n  auth: state.login.auth,\n  no: state.list.get(\"no\"),\n  lasttime: state.commute.get(\"lasttime\"),\n  cnt: state.commute.get('cnt'),\n  preGoTo: state.commute.get(\"preGoTo\"),\n  preGoOff: state.commute.get(\"preGoOff\"),\n  preHoliDay: state.holiday.get(\"preHoliDay\"),\n  goto: state.commute.get(\"goto\"),\n  gooff: state.commute.get(\"gooff\"),\n  endTime: state.commute.get(\"endTime\"),\n  totalWorkTime: state.time.get(\"totalWorkTime\"),\n  starttime: state.time.get(\"starttime\"),\n  time: state.time.get(\"time\"),\n  start: state.time.get(\"start\"),\n  end: state.time.get(\"end\"),\n  time1: state.time.get(\"time1\"),\n  endtime: state.time.get(\"endtime\"),\n  breakTimeList: state.time.get(\"breakTimeList\"),\n  language: state.language.language\n}), dispatch => ({\n  CommuteActions: bindActionCreators(commuteActions, dispatch),\n  HeaderActions: bindActionCreators(headerActions, dispatch),\n  TimeActions: bindActionCreators(timeActions, dispatch)\n}))(TimeList);","map":{"version":3,"sources":["F:/JAVA_WORKSPACE/frontend_react-20191018T023535Z-001/frontend_react/src/components/Header/Time/TimeList.js"],"names":["React","Component","connect","moment","commuteActions","headerActions","timeActions","bindActionCreators","locale","timer","ary","TimeList","state","timeset","getTime","hour","format","minute","second","setState","tick","props","endTime","preGoTo","preGoOff","preHoliDay","language","convertState","Date","now","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","end","night","isoWeekday","isAfter","isBefore","componentWillMount","cnt","auth","CommuteActions","token","loginUserNo","TimeActions","name","value","changeInput","setInterval","endtime","starttime","goto","gooff","getStartTime","getTotalWorkTime","getTodayCommuteEndTime","clearInterval","sessionStorage","getItem","stateChange","render","late","totalWorkTime","time1","breakTimeList","breaktimeboolean","gotoBreakTime","selectstarttime","pushnow","pushstarttime","timediff","diff","timediff2","secondsDiff","total","breakTime","length","map","items","index","push","description","start","time","breakStartTime","gotoBreakTimeEnd","statediff","statediff2","console","log","add","selectTime","latehour","Math","floor","latemin","latesec","login","no","list","get","lasttime","commute","holiday","dispatch","HeaderActions"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport moment from \"moment\";\r\nimport * as commuteActions from \"store/modules/commute\";\r\nimport * as headerActions from \"store/modules/Header\";\r\nimport * as timeActions from \"store/modules/time\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport locale from \"locale\";\r\nlet timer = null;\r\nlet ary= [];\r\nclass TimeList extends Component {\r\n    state = {\r\n        timeset: \" \"\r\n    };\r\n    getTime = () => {\r\n        const hour = moment().format(\"HH\");\r\n        const minute = moment().format(\"mm\");\r\n        const second = moment().format(\"ss\");\r\n        const timeset = `${hour > 9 ? hour : `0${hour}`}:${minute > 9 ? minute : `0${minute}`}:${second > 9 ? second : `0${second}`}`;\r\n        this.setState({\r\n            timeset\r\n        });\r\n    };\r\n\r\n    componentWillMount() {\r\n        let cnt = 0;\r\n        const {auth, CommuteActions, token, loginUserNo, TimeActions} = this.props;\r\n        let name = \"goto\";\r\n        let value = false;\r\n        CommuteActions.changeInput({name, value});\r\n        name = \"gooff\";\r\n        value = false;\r\n        CommuteActions.changeInput({name, value});\r\n        name = \"starttime\"\r\n        value = \"\";\r\n        TimeActions.changeInput({name, value});\r\n        name = \"endtime\"\r\n        value = \"\";\r\n        TimeActions.changeInput({name, value});\r\n\r\n        if (auth === 'ROLE_USER') {\r\n            timer = setInterval(() => {\r\n                const {endtime, starttime, goto, gooff} = this.props;\r\n\r\n                cnt++;\r\n                if (starttime === \"\" && goto) {\r\n                    TimeActions.getStartTime(loginUserNo, token);\r\n                }\r\n                // //console.log(goto);\r\n                // //console.log(starttime);\r\n                // //console.log(endtime);\r\n                // //console.log(gooff);\r\n                if (starttime !== \"\" && endtime === \"\" && gooff) {\r\n                    TimeActions.getTotalWorkTime(loginUserNo, token);\r\n                    TimeActions.getTodayCommuteEndTime(loginUserNo, token);\r\n                    clearInterval(timer);\r\n                }\r\n\r\n                CommuteActions.changeInput({name: 'cnt', value: cnt});\r\n                this.tick();\r\n               // //console.log(\"인터벌~\");\r\n                if (!sessionStorage.getItem(\"id_token\")) {\r\n\r\n                    clearInterval(timer);\r\n\r\n                }\r\n            }, 1000);\r\n        }\r\n    }\r\n\r\n    convertState(name, value) {\r\n        const {CommuteActions} = this.props;\r\n\r\n        CommuteActions.stateChange({name, value});\r\n    }\r\n\r\n    tick = () => {\r\n        const {endTime, preGoTo, preGoOff, preHoliDay, language} = this.props;\r\n\r\n        this.convertState('time', new Date());\r\n\r\n        const now = moment(new Date().getFullYear() + '-' + (new Date().getMonth() + 1) + '-' + (new Date().getDate()) + \" \" + new Date().getHours() + \":\" + new Date().getMinutes() + \":\" + new Date().getSeconds(), 'YYYY-MM-DD HH:mm:ss');\r\n        const end = moment(new Date().getFullYear() + '-' + (new Date().getMonth() + 1) + '-' + (new Date().getDate()) + \" \" + endTime, 'YYYY-MM-DD HH:mm:ss');\r\n        const night = moment(new Date().getFullYear() + '-' + (new Date().getMonth() + 1) + '-' + (new Date().getDate() + 1) + \" \" + \"00:00:00\", 'YYYY-MM-DD HH:mm:ss')\r\n\r\n\r\n        if (!preGoTo && preGoOff) {\r\n            this.convertState('preGoTo', true);\r\n        }\r\n\r\n        if ((now.isoWeekday() === 1) || (preHoliDay === true)) {\r\n            this.convertState('preGoTo', true);\r\n            this.convertState('preGoOff', true);\r\n        }\r\n\r\n        if (now.isAfter(night)) {\r\n            //console.log(\"same\");\r\n            this.convertState('isNight', true);\r\n        }\r\n\r\n        if (now.isAfter(end)) {\r\n            //console.log(\"after\");\r\n            this.convertState('isGoOff', true);\r\n            this.convertState('isNigiht', false);\r\n        }\r\n\r\n        if (now.isBefore(end)) {\r\n            //console.log(\"before\");\r\n            this.convertState('isGoOff', false);\r\n            this.convertState(\"isNight\", false);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let state=0;\r\n        //지각여부\r\n        let late=false;\r\n        let now = moment().format('HH:mm:ss');\r\n        const {totalWorkTime, starttime, time1, endtime, goto,breakTimeList,language,CommuteActions} = this.props;\r\n        //console.log(language);\r\n        ////console.log(starttime);\r\n       // //console.log(goto);\r\n       // //console.log(\"랜더\")\r\n       //console.log(time1);\r\n       let breaktimeboolean=false;\r\n       let gotoBreakTime=false;\r\n\r\n        let timeset;\r\n        if (starttime === \"\") {\r\n            timeset = '00:00:00';\r\n        } else if (starttime !== \"\") {\r\n\r\n            const selectstarttime = moment(time1, \"HH:mm:ss\");\r\n            const pushnow = moment(now, \"HH:mm:ss\");\r\n            let pushstarttime = moment(starttime, \"HH:mm:ss\");\r\n            const timediff = selectstarttime.diff(pushnow, \"seconds\");       // 출근해야하는시간 - 현재시간    양수이면 근무시간 0 출력 음수이면 계산\r\n            const timediff2 = selectstarttime.diff(pushstarttime, \"seconds\");// 출근해야하는시간 - 출근시간  양수이면 정상출근 음수이면 지각\r\n                                                                             // 정상 출근이면   출근시간 = 출근해야하는시간 \r\n                                                                            // 지각 이면 출근시간 = 출근한 시간\r\n            // //console.log(timediff);\r\n            if (timediff > 0) {\r\n                timeset = \"00:00:00\";\r\n                //console.log(\"@@\");\r\n            } else {\r\n\r\n                let secondsDiff;\r\n                //정상 출근\r\n                if (timediff2>=0)\r\n                {\r\n                    late=false;\r\n                    secondsDiff=pushnow.diff(selectstarttime, \"seconds\");\r\n                }\r\n                //지각 출근\r\n                else\r\n                {\r\n                    late=true;\r\n                    secondsDiff=pushnow.diff(pushstarttime, \"seconds\");\r\n                }\r\n\r\n                let total=0; \r\n                let breakTime=moment(\"00:00\", \"HH:mm:ss\"); \r\n                \r\n\r\n\r\n                if(breakTimeList!==\"\" && ary.length===0)\r\n                breakTimeList.map((items,index)=>{\r\n                    // console.log(items);\r\n                     ary.push({\r\n                         description:items.description,\r\n                         start:moment(items.start, \"HH:mm:ss\"), \r\n                         end:moment(items.end, \"HH:mm:ss\"),\r\n                         time:moment(items.end, \"HH:mm:ss\").diff(moment(items.start, \"HH:mm:ss\"),\"seconds\")\r\n                     })\r\n                })\r\n                //console.log(ary);\r\n                // let state=0;\r\n                 let breakStartTime=0;\r\n                 let gotoBreakTimeEnd=0;\r\n                if(ary.length!==0)\r\n                {\r\n                    ary.map((items,index)=>{\r\n                       const statediff = items.start.diff(pushnow, \"seconds\");\r\n                       const statediff2 = items.end.diff(pushnow, \"seconds\");\r\n                       \r\n                       //출근을 휴게시간 도중에 했을때\r\n                       if(items.start.diff(pushstarttime)<=0 && items.end.diff(pushstarttime)>=0){\r\n                           //state=2;\r\n                           gotoBreakTimeEnd = items.end;\r\n                           pushstarttime=items.end;\r\n                           gotoBreakTime=true;\r\n                           console.log(\"@@@\");\r\n                       }\r\n                       //else\r\n                       //휴게시간 지나간\r\n                       if(statediff2<0){\r\n                       // console.log(\"지나간 휴게시간:\"+items.description);\r\n                        //state=0;\r\n                        //출근시간 이후의 breaktime만\r\n                        if(statediff<0 && items.start.diff(pushstarttime)>0)\r\n                        breakTime=breakTime.add(items.time,\"seconds\");\r\n                        }\r\n\r\n                        //휴게시간\r\n                       else if(statediff<=0 && statediff2>=0){\r\n                      console.log(\"현재는 휴게시간:\"+items.description);\r\n                       state=1;\r\n                       breakStartTime=items.start;\r\n                       }\r\n\r\n                        //아직 시간 안된 휴게시간\r\n                    //     else if( statediff>0){\r\n                    //         console.log(\"앞으로의 휴게시간:\"+items.description);\r\n                    //         state=2;\r\n                           \r\n                    //    }\r\n                    })\r\n                    let selectTime;\r\n                    if(late)\r\n                        selectTime= pushstarttime;\r\n                    else if(late&&gotoBreakTime)\r\n                        selectTime=gotoBreakTimeEnd;\r\n                    else\r\n                         selectTime= selectstarttime;\r\n                    if(state===0){\r\n                        console.log(\"state0\");\r\n                    total=pushnow.diff(selectTime, \"seconds\")\r\n                    //console.log(total);\r\n                    const latehour = Math.floor(total / 3600)\r\n                const latemin = Math.floor((total - (latehour * 3600)) / 60)\r\n                const latesec = (total - (latehour * 3600) - (latemin * 60))\r\n                timeset = `${latehour > 9 ? latehour : `0${latehour}`}:${latemin > 9 ? latemin : `0${latemin}`}:${latesec > 9 ? latesec : `0${latesec}`}`;\r\n                total=moment(timeset, \"HH:mm:ss\").diff(breakTime);     \r\n                //console.log(total);\r\n                    \r\n                    }\r\n                    else if(state===1){\r\n                        console.log(gotoBreakTime);\r\n                        console.log(late);\r\n                        console.log(\"state1\");\r\n                       \r\n                        total=breakStartTime.diff(selectTime, \"seconds\")\r\n                        if(total<=0)\r\n                        total=0;\r\n                        else{\r\n                    const latehour = Math.floor(total / 3600)\r\n                    const latemin = Math.floor((total - (latehour * 3600)) / 60)\r\n                    const latesec = (total - (latehour * 3600) - (latemin * 60))\r\n                    timeset = `${latehour > 9 ? latehour : `0${latehour}`}:${latemin > 9 ? latemin : `0${latemin}`}:${latesec > 9 ? latesec : `0${latesec}`}`;\r\n                    total=moment(timeset, \"HH:mm:ss\").diff(breakTime);     \r\n                        }\r\n                   \r\n                   // console.log(total);\r\n                    \r\n                    }\r\n                    else if(state===2){\r\n                        console.log(\"State2\")\r\n                        total=pushnow.diff(gotoBreakTimeEnd, \"seconds\");\r\n                       //// console.log(total);\r\n                       // console.log(total);  \r\n                        if(total<=0){\r\n                        total=0;\r\n                        breaktimeboolean=true;\r\n                        }\r\n                        else\r\n                        {\r\n                         const latehour = Math.floor(total / 3600)\r\n                    const latemin = Math.floor((total - (latehour * 3600)) / 60)\r\n                    const latesec = (total - (latehour * 3600) - (latemin * 60))\r\n                    timeset = `${latehour > 9 ? latehour : `0${latehour}`}:${latemin > 9 ? latemin : `0${latemin}`}:${latesec > 9 ? latesec : `0${latesec}`}`;\r\n                    total=moment(timeset, \"HH:mm:ss\").diff(breakTime);   \r\n                   // console.log(total);  \r\n                        }\r\n                        if(total<=0)\r\n                        total=0;\r\n                    }\r\n            //         if(state==2){\r\n            //         total=pushnow.diff(pushstarttime, \"seconds\")\r\n                    \r\n                    \r\n                    \r\n            //         const latehour = Math.floor(total / 3600)\r\n            //     const latemin = Math.floor((total - (latehour * 3600)) / 60)\r\n            //     const latesec = (total - (latehour * 3600) - (latemin * 60))\r\n            //     timeset = `${latehour > 9 ? latehour : `0${latehour}`}:${latemin > 9 ? latemin : `0${latemin}`}:${latesec > 9 ? latesec : `0${latesec}`}`;\r\n            //     total=moment(timeset, \"HH:mm:ss\").diff(breakTime);     \r\n            //     console.log(total);\r\n            // }\r\n           // console.log(breakTime);\r\n\r\n                                      }\r\n                //휴게시간이 존재x\r\n                else{\r\n                    total=pushnow.diff(secondsDiff, \"seconds\");\r\n                }\r\n               // console.log(total/1000);\r\n               //if(state!==2)\r\n                total = total /1000;\r\n              \r\n                const latehour = Math.floor(total / 3600)\r\n                const latemin = Math.floor((total - (latehour * 3600)) / 60)\r\n                const latesec = (total - (latehour * 3600) - (latemin * 60))\r\n                timeset = `${latehour > 9 ? latehour : `0${latehour}`}:${latemin > 9 ? latemin : `0${latemin}`}:${latesec > 9 ? latesec : `0${latesec}`}`;\r\n                \r\n                CommuteActions.changeInput({\r\n                    name:\"totalWorkTime\",\r\n                    value:timeset\r\n                })\r\n            }\r\n        }\r\n            //     let secondsDiff;\r\n            //   //  //console.log(timediff2);\r\n            //     if (timediff2 > 0) {\r\n            //         const startdt = moment(now, \"HH:mm:ss\");\r\n            //         const enddt = moment(time1, \"HH:mm:ss\");\r\n            //         secondsDiff = startdt.diff(enddt, \"seconds\");\r\n\r\n\r\n            //     } else {\r\n            //         const startdt = moment(now, \"HH:mm:ss\");\r\n            //         const enddt = moment(starttime, \"HH:mm:ss\");\r\n            //         secondsDiff = startdt.diff(enddt, \"seconds\");\r\n\r\n                    \r\n            //     }\r\n            //     const latehour = Math.floor(secondsDiff / 3600)\r\n            //     const latemin = Math.floor((secondsDiff - (latehour * 3600)) / 60)\r\n            //     const latesec = (secondsDiff - (latehour * 3600) - (latemin * 60))\r\n\r\n            //     if (secondsDiff < 0) {\r\n            //         timeset = \"00:00:00\"\r\n            //     } else {\r\n            //         //   //console.log(\"@@@@\");\r\n            //         timeset = `${latehour > 9 ? latehour : `0${latehour}`}:${latemin > 9 ? latemin : `0${latemin}`}:${latesec > 9 ? latesec : `0${latesec}`}`;\r\n        //         }\r\n        //     }\r\n\r\n        // }\r\n        if (endtime === \"\"&&state==1||(state==2&&breaktimeboolean))\r\n            return (<div>{timeset}<br/><div><h6>{locale.timeset[language]}</h6></div></div>);\r\n        else if (endtime === \"\"&&(state==0||state==2))\r\n            return (<div>{timeset}</div>);\r\n        else\r\n            return <div>{totalWorkTime}</div>;\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    state => ({\r\n        loginUserNo: state.login.no,\r\n        token: state.login.token,\r\n        auth: state.login.auth,\r\n        no: state.list.get(\"no\"),\r\n        lasttime: state.commute.get(\"lasttime\"),\r\n        cnt: state.commute.get('cnt'),\r\n        preGoTo: state.commute.get(\"preGoTo\"),\r\n        preGoOff: state.commute.get(\"preGoOff\"),\r\n        preHoliDay: state.holiday.get(\"preHoliDay\"),\r\n        goto: state.commute.get(\"goto\"),\r\n        gooff: state.commute.get(\"gooff\"),\r\n        endTime: state.commute.get(\"endTime\"),\r\n        totalWorkTime: state.time.get(\"totalWorkTime\"),\r\n        starttime: state.time.get(\"starttime\"),\r\n        time: state.time.get(\"time\"),\r\n        start: state.time.get(\"start\"),\r\n        end: state.time.get(\"end\"),\r\n        time1: state.time.get(\"time1\"),\r\n        endtime: state.time.get(\"endtime\"),\r\n        breakTimeList:state.time.get(\"breakTimeList\"),\r\n        language: state.language.language\r\n    }),\r\n    dispatch => ({\r\n        CommuteActions: bindActionCreators(commuteActions, dispatch),\r\n        HeaderActions: bindActionCreators(headerActions, dispatch),\r\n        TimeActions: bindActionCreators(timeActions, dispatch)\r\n\r\n    })\r\n)(TimeList);"]},"metadata":{},"sourceType":"module"}