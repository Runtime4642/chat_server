{"ast":null,"code":"import _regeneratorRuntime from \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\src\\\\containers\\\\workAttitude\\\\WorkAttitudeListContainer.js\";\nimport React, { Component } from 'react';\nimport WorkAttitudeList from 'components/workAttitude/WorkAttitudeList';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport * as listActions from 'store/modules/workattitudecalendarlist';\nimport * as workAttitudeActions from 'store/modules/workattitude';\nimport * as paginationActions from 'store/modules/pagination';\nimport * as getCalList from 'store/modules/workattitudecalendarlist';\nimport * as stateActions from 'store/modules/state';\nimport locale from 'locale';\n\nclass WorkAttitudeListContainer extends Component {\n  constructor(...args) {\n    var _this;\n\n    super(...args);\n    _this = this;\n    this.getList = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _this$props, WorkAttitudeActions, activePage, language, _this$props2, token, auth, loginUserNo, GetCalList, PaginationActions, date, dateString, search, pageNumber;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _this$props = _this.props, WorkAttitudeActions = _this$props.WorkAttitudeActions, activePage = _this$props.activePage, language = _this$props.language;\n            _this$props2 = _this.props, token = _this$props2.token, auth = _this$props2.auth, loginUserNo = _this$props2.loginUserNo, GetCalList = _this$props2.GetCalList, PaginationActions = _this$props2.PaginationActions;\n            _context.prev = 2;\n\n            if (!(auth === \"ROLE_ADMIN\")) {\n              _context.next = 8;\n              break;\n            }\n\n            _context.next = 6;\n            return WorkAttitudeActions.getWorkAttitudeList('', activePage, token, language);\n\n          case 6:\n            _context.next = 18;\n            break;\n\n          case 8:\n            date = new Date();\n            dateString = new Date(date.getTime() - date.getTimezoneOffset() * 60000).toISOString().split(\"T\")[0].substring(0, 7);\n            search = {\n              searchFromDate: dateString,\n              searchUserNo: loginUserNo,\n              searchWorkAttitude: \"전체\"\n            };\n            pageNumber = 1; //리스트\n\n            _context.next = 14;\n            return PaginationActions.getWorkAttitudeTotal(search, token);\n\n          case 14:\n            _context.next = 16;\n            return WorkAttitudeActions.getWorkAttitudeList(search, pageNumber, token, language);\n\n          case 16:\n            _context.next = 18;\n            return GetCalList.getList(search, token, true);\n\n          case 18:\n            _context.next = 23;\n            break;\n\n          case 20:\n            _context.prev = 20;\n            _context.t0 = _context[\"catch\"](2);\n            console.log(_context.t0);\n\n          case 23:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[2, 20]]);\n    }));\n\n    this.getAlarmSearchList = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(keyNo) {\n        var _this$props3, WorkAttitudeActions, PaginationActions, token, language, StateActions, pageNumber, search;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _this$props3 = _this.props, WorkAttitudeActions = _this$props3.WorkAttitudeActions, PaginationActions = _this$props3.PaginationActions, token = _this$props3.token, language = _this$props3.language, StateActions = _this$props3.StateActions;\n              pageNumber = 1;\n              search = {\n                keyNo\n              };\n              _context2.prev = 3;\n              _context2.next = 6;\n              return StateActions.getWorkAttitudeSearchStateList(search, token);\n\n            case 6:\n              _context2.next = 8;\n              return PaginationActions.getWorkAttitudeTotal(search, token);\n\n            case 8:\n              _context2.next = 10;\n              return WorkAttitudeActions.getWorkAttitudeList(search, pageNumber, token, language);\n\n            case 10:\n              _context2.next = 15;\n              break;\n\n            case 12:\n              _context2.prev = 12;\n              _context2.t0 = _context2[\"catch\"](3);\n              console.log(_context2.t0);\n\n            case 15:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[3, 12]]);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    this.updateRead = no => {\n      const _this$props4 = this.props,\n            token = _this$props4.token,\n            auth = _this$props4.auth,\n            WorkAttitudeActions = _this$props4.WorkAttitudeActions;\n      const recordType = \"근태\";\n      WorkAttitudeActions.updateRead(no, auth, recordType, token);\n    };\n\n    this.handleChangeInput = ({\n      name,\n      value\n    }) => {\n      if (name === 'no') {\n        this.updateRead(value);\n      }\n\n      const WorkAttitudeActions = this.props.WorkAttitudeActions;\n      WorkAttitudeActions.changeInput({\n        name,\n        value\n      });\n    };\n  }\n\n  componentDidMount() {\n    let keyNo = null;\n    const language = this.props.language;\n\n    if (sessionStorage.getItem(\"listkeyNo\") !== \"define\") {\n      keyNo = sessionStorage.getItem(\"listkeyNo\");\n      sessionStorage.removeItem(\"listkeyNo\");\n      sessionStorage.setItem(\"listkeyNo\", \"define\");\n    }\n\n    if (keyNo !== null) {\n      this.getAlarmSearchList(keyNo);\n    } else {\n      this.getList();\n    }\n\n    document.title = locale.workAttitudeListTitle[language];\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    document.title = locale.workAttitudeListTitle[nextProps.language];\n    return true;\n  } // (list, calendar)리스트 클릭시 updateRead액션 발생\n  // MongoDB의 key_no와 no가 일치하면 read true로 update\n\n\n  render() {\n    const _this$props5 = this.props,\n          tables = _this$props5.tables,\n          loading = _this$props5.loading,\n          badge = _this$props5.badge,\n          changeView = _this$props5.changeView,\n          language = _this$props5.language;\n    const handleChangeInput = this.handleChangeInput;\n    if (loading && tables <= 0) return null;\n    if (changeView !== 'table') return null;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(WorkAttitudeList, {\n      tables: tables,\n      badge: badge,\n      language: language,\n      handleChangeInput: handleChangeInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default connect(state => ({\n  changeView: state.workattitude.get('changeView'),\n  no: state.workattitude.get('no'),\n  tables: state.workattitude.get('tables'),\n  badge: state.workattitude.get('badge'),\n  loading: state.pender.pending['workattitude/WORK_ATTITUDE_LIST'],\n  activePage: state.pagination.get('activePage'),\n  token: state.login.token,\n  language: state.language.language,\n  auth: state.login.auth,\n  loginUserNo: state.login.no\n}), dispatch => ({\n  WorkAttitudeActions: bindActionCreators(workAttitudeActions, dispatch),\n  ListActions: bindActionCreators(listActions, dispatch),\n  PaginationActions: bindActionCreators(paginationActions, dispatch),\n  GetCalList: bindActionCreators(getCalList, dispatch),\n  StateActions: bindActionCreators(stateActions, dispatch)\n}))(WorkAttitudeListContainer);","map":{"version":3,"sources":["F:/JAVA_WORKSPACE/frontend_react-20191018T023535Z-001/frontend_react/src/containers/workAttitude/WorkAttitudeListContainer.js"],"names":["React","Component","WorkAttitudeList","bindActionCreators","connect","listActions","workAttitudeActions","paginationActions","getCalList","stateActions","locale","WorkAttitudeListContainer","getList","props","WorkAttitudeActions","activePage","language","token","auth","loginUserNo","GetCalList","PaginationActions","getWorkAttitudeList","date","Date","dateString","getTime","getTimezoneOffset","toISOString","split","substring","search","searchFromDate","searchUserNo","searchWorkAttitude","pageNumber","getWorkAttitudeTotal","console","log","getAlarmSearchList","keyNo","StateActions","getWorkAttitudeSearchStateList","updateRead","no","recordType","handleChangeInput","name","value","changeInput","componentDidMount","sessionStorage","getItem","removeItem","setItem","document","title","workAttitudeListTitle","shouldComponentUpdate","nextProps","nextState","render","tables","loading","badge","changeView","state","workattitude","get","pender","pending","pagination","login","dispatch","ListActions"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport WorkAttitudeList from 'components/workAttitude/WorkAttitudeList';\r\nimport {bindActionCreators} from 'redux';\r\nimport {connect} from 'react-redux';\r\nimport * as listActions from 'store/modules/workattitudecalendarlist';\r\nimport * as workAttitudeActions from 'store/modules/workattitude';\r\nimport * as paginationActions from 'store/modules/pagination';\r\nimport * as getCalList from 'store/modules/workattitudecalendarlist';\r\nimport * as stateActions from 'store/modules/state';\r\nimport locale from 'locale';\r\n\r\n\r\nclass WorkAttitudeListContainer extends Component{\r\n\r\n    getList = async() => {\r\n        const { WorkAttitudeActions, activePage, language } = this.props;\r\n        const { token ,auth,loginUserNo,GetCalList, PaginationActions} = this.props;\r\n\r\n        try{if(auth===\"ROLE_ADMIN\"){\r\n            await WorkAttitudeActions.getWorkAttitudeList('', activePage, token, language);\r\n        }\r\n        else{\r\n            let date = new Date();\r\n            let dateString = new Date(date.getTime() - (date.getTimezoneOffset() * 60000 ))\r\n                                .toISOString()\r\n                                .split(\"T\")[0].substring(0,7);\r\n\r\n\r\n                const search = {\r\n                    searchFromDate:dateString,\r\n                    searchUserNo:loginUserNo,\r\n                    searchWorkAttitude:\"전체\"\r\n                }\r\n\r\n                const pageNumber = 1;\r\n\r\n                //리스트\r\n                await PaginationActions.getWorkAttitudeTotal(search, token);\r\n                await WorkAttitudeActions.getWorkAttitudeList(search, pageNumber, token, language);\r\n                //달력\r\n                await GetCalList.getList(search, token, true);\r\n        }\r\n        } catch(e){\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    getAlarmSearchList = async(keyNo) => {\r\n        const { WorkAttitudeActions, PaginationActions, token, language, StateActions } = this.props;\r\n        const pageNumber = 1\r\n\r\n        const search = {\r\n            keyNo\r\n        }\r\n\r\n        try {\r\n            await StateActions.getWorkAttitudeSearchStateList(search, token);\r\n            await PaginationActions.getWorkAttitudeTotal(search, token);\r\n            await WorkAttitudeActions.getWorkAttitudeList(search, pageNumber, token, language);\r\n        } catch(e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let keyNo = null;\r\n        const {language} = this.props;\r\n        if(sessionStorage.getItem(\"listkeyNo\") !== \"define\") {\r\n            keyNo = sessionStorage.getItem(\"listkeyNo\");\r\n            sessionStorage.removeItem(\"listkeyNo\");\r\n            sessionStorage.setItem(\"listkeyNo\", \"define\");\r\n        }\r\n        if(keyNo !== null) {\r\n            this.getAlarmSearchList(keyNo);\r\n        } else {\r\n            this.getList();\r\n        }\r\n        document.title = locale.workAttitudeListTitle[language];\r\n    }\r\n  \r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        document.title = locale.workAttitudeListTitle[nextProps.language];\r\n        return true;\r\n    }\r\n\r\n    // (list, calendar)리스트 클릭시 updateRead액션 발생\r\n    // MongoDB의 key_no와 no가 일치하면 read true로 update\r\n    updateRead = (no) => {\r\n        const { token, auth, WorkAttitudeActions } = this.props;\r\n        const recordType = \"근태\";\r\n        WorkAttitudeActions.updateRead(no, auth, recordType, token);\r\n    }\r\n    \r\n    handleChangeInput = ({name, value}) => {\r\n        if(name === 'no') {\r\n            this.updateRead(value);\r\n        }\r\n        const { WorkAttitudeActions } = this.props;\r\n        WorkAttitudeActions.changeInput({name, value});\r\n    }\r\n\r\n    render() {\r\n        const { tables, loading, badge,changeView, language } = this.props;\r\n        const { handleChangeInput } = this;\r\n        \r\n        if(loading && tables <= 0) return null;\r\n        if(changeView !== 'table') return null;\r\n        return (\r\n            <div>\r\n                <WorkAttitudeList tables={tables} badge={badge} language={language} handleChangeInput={handleChangeInput}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        changeView: state.workattitude.get('changeView'),\r\n        no: state.workattitude.get('no'),\r\n        tables: state.workattitude.get('tables'),\r\n        badge: state.workattitude.get('badge'),\r\n        loading: state.pender.pending['workattitude/WORK_ATTITUDE_LIST'],\r\n        activePage: state.pagination.get('activePage'),\r\n        token: state.login.token,\r\n        language: state.language.language,\r\n        auth: state.login.auth,\r\n        loginUserNo: state.login.no\r\n    }), \r\n    (dispatch) => ({\r\n        WorkAttitudeActions: bindActionCreators(workAttitudeActions, dispatch),\r\n        ListActions: bindActionCreators(listActions, dispatch),\r\n        PaginationActions: bindActionCreators(paginationActions, dispatch),\r\n        GetCalList: bindActionCreators(getCalList, dispatch),\r\n        StateActions: bindActionCreators(stateActions, dispatch)\r\n    })\r\n)(WorkAttitudeListContainer);"]},"metadata":{},"sourceType":"module"}