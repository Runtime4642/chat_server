{"ast":null,"code":"import _objectSpread from \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport Axios from 'axios';\nimport { List, fromJS } from 'immutable';\nexport const initialState = {\n  keyNo: false,\n  isInit: false,\n  isLoading: false,\n  tables: false,\n  error: null\n};\nexport const START_NOTICE = \"notice/START_NOTICE\";\nexport const NOTICE_SUCCESS = \"notice/NOTICE_SUCCESS\";\nexport const NOTICE_FAILURE = \"notice/NOTICE_FAILURE\";\nexport const INIT_NOTICE_STORE = \"notice/INIT_NOTICE_STORE\";\nexport const SET_KEYNO = \"notice/SET_KEYNO\";\nexport const INIT_KEYNO = \"notice/INIT_KEYNO\";\nexport const UPDATE_READ = \"notice/UPDATE_READ\";\nexport const startNotice = () => ({\n  type: START_NOTICE\n});\nexport const noticeSuccess = data => ({\n  type: NOTICE_SUCCESS,\n  payload: {\n    data: data\n  }\n});\nexport const noticeFailure = () => ({\n  type: NOTICE_FAILURE\n});\nexport const initNoticeStore = () => ({\n  type: INIT_NOTICE_STORE\n});\nexport const setKeyNo = keyNo => ({\n  type: SET_KEYNO,\n  payload: {\n    keyNo: keyNo\n  }\n});\nexport const initKeyNo = () => ({\n  type: INIT_KEYNO\n});\nexport const updateRead = () => ({\n  type: UPDATE_READ\n});\nexport const noticeupdateRead = (key_no, auth, recordType, token) => {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return Axios.get('http://218.39.221.104:8080/smartchecker/record/alarm/update/' + key_no + \"/\" + auth + \"/\" + recordType, {\n              headers: {\n                'Authorization': 'Bearer ' + token\n              }\n            }).then(response => {//console.log(response);\n            }).catch(error => {//console.log(error);\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport const setNoticeKeyNo = keyNo => {\n  return dispatch => {\n    dispatch(setKeyNo(keyNo));\n  };\n};\nexport const initNoticeKeyNo = () => {\n  return dispatch => {\n    dispatch(initKeyNo());\n  };\n};\nexport const setNoticeStore = () => {\n  return dispatch => {\n    dispatch(initNoticeStore());\n  };\n};\nexport const getNotice = (auth, user_no, token) => {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            dispatch(startNotice());\n\n            if (!(token !== false)) {\n              _context2.next = 4;\n              break;\n            }\n\n            _context2.next = 4;\n            return Axios.get('http://218.39.221.104:8080/smartchecker/record/alarm/' + auth + '?user_no=' + user_no, {\n              headers: {\n                'Authorization': 'Bearer ' + token\n              }\n            }).then(response => {\n              if (sessionStorage.getItem(\"alarmnum\") === null) {\n                sessionStorage.setItem(\"alarmnum\", response.data.data.length);\n              } else if (sessionStorage.getItem(\"alarmnum\") !== response.data.data.length && sessionStorage.getItem(\"alarmnum\") !== null) {\n                sessionStorage.removeItem(\"alarmnum\");\n\n                if (sessionStorage.getItem(\"alarmnum\") === null) {\n                  sessionStorage.setItem(\"alarmnum\", response.data.data.length);\n                }\n              }\n\n              dispatch(noticeSuccess(fromJS(response.data.data)));\n            }).catch(error => {//console.log(error);\n            });\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nexport default function NoticeReducer(state = initialState, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case START_NOTICE:\n      return _objectSpread({}, state, {\n        isLoading: true\n      });\n\n    case NOTICE_SUCCESS:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        isInit: true,\n        tables: payload.data,\n        error: null\n      });\n\n    case NOTICE_FAILURE:\n      return _objectSpread({}, state, {\n        isInit: false,\n        error: true\n      });\n\n    case INIT_NOTICE_STORE:\n      return _objectSpread({}, state, {\n        keyNo: false,\n        isInit: false,\n        tables: false,\n        error: null\n      });\n\n    case SET_KEYNO:\n      return _objectSpread({}, state, {\n        keyNo: payload.keyNo\n      });\n\n    case INIT_KEYNO:\n      return _objectSpread({}, state, {\n        keyNo: false\n      });\n\n    case UPDATE_READ:\n      return _objectSpread({}, state);\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["F:/JAVA_WORKSPACE/frontend_react-20191018T023535Z-001/frontend_react/src/components/Header/Notice/NoticeListState.js"],"names":["Axios","List","fromJS","initialState","keyNo","isInit","isLoading","tables","error","START_NOTICE","NOTICE_SUCCESS","NOTICE_FAILURE","INIT_NOTICE_STORE","SET_KEYNO","INIT_KEYNO","UPDATE_READ","startNotice","type","noticeSuccess","data","payload","noticeFailure","initNoticeStore","setKeyNo","initKeyNo","updateRead","noticeupdateRead","key_no","auth","recordType","token","dispatch","get","headers","then","response","catch","setNoticeKeyNo","initNoticeKeyNo","setNoticeStore","getNotice","user_no","sessionStorage","getItem","setItem","length","removeItem","NoticeReducer","state"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,WAA7B;AAEA,OAAO,MAAMC,YAAY,GAAG;AACxBC,EAAAA,KAAK,EAAE,KADiB;AAExBC,EAAAA,MAAM,EAAE,KAFgB;AAGxBC,EAAAA,SAAS,EAAE,KAHa;AAIxBC,EAAAA,MAAM,EAAE,KAJgB;AAKxBC,EAAAA,KAAK,EAAE;AALiB,CAArB;AAQP,OAAO,MAAMC,YAAY,GAAG,qBAArB;AACP,OAAO,MAAMC,cAAc,GAAG,uBAAvB;AACP,OAAO,MAAMC,cAAc,GAAG,uBAAvB;AACP,OAAO,MAAMC,iBAAiB,GAAG,0BAA1B;AACP,OAAO,MAAMC,SAAS,GAAG,kBAAlB;AACP,OAAO,MAAMC,UAAU,GAAG,mBAAnB;AACP,OAAO,MAAMC,WAAW,GAAG,oBAApB;AAEP,OAAO,MAAMC,WAAW,GAAG,OAAO;AAC9BC,EAAAA,IAAI,EAAER;AADwB,CAAP,CAApB;AAIP,OAAO,MAAMS,aAAa,GAAIC,IAAD,KAAW;AACpCF,EAAAA,IAAI,EAAEP,cAD8B;AAEpCU,EAAAA,OAAO,EAAG;AACND,IAAAA,IAAI,EAAGA;AADD;AAF0B,CAAX,CAAtB;AAOP,OAAO,MAAME,aAAa,GAAG,OAAO;AAChCJ,EAAAA,IAAI,EAAEN;AAD0B,CAAP,CAAtB;AAIP,OAAO,MAAMW,eAAe,GAAG,OAAO;AAClCL,EAAAA,IAAI,EAAEL;AAD4B,CAAP,CAAxB;AAIP,OAAO,MAAMW,QAAQ,GAAInB,KAAD,KAAY;AAChCa,EAAAA,IAAI,EAAEJ,SAD0B;AAEhCO,EAAAA,OAAO,EAAG;AACNhB,IAAAA,KAAK,EAAGA;AADF;AAFsB,CAAZ,CAAjB;AAOP,OAAO,MAAMoB,SAAS,GAAG,OAAO;AAC5BP,EAAAA,IAAI,EAAEH;AADsB,CAAP,CAAlB;AAIP,OAAO,MAAMW,UAAU,GAAG,OAAO;AAC7BR,EAAAA,IAAI,EAAEF;AADuB,CAAP,CAAnB;AAIP,OAAO,MAAMW,gBAAgB,GAAG,CAACC,MAAD,EAASC,IAAT,EAAeC,UAAf,EAA2BC,KAA3B,KAAqC;AACjE;AAAA,wEAAO,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA,mBACG/B,KAAK,CAACgC,GAAN,CAAU,iEAAiEL,MAAjE,GAA0E,GAA1E,GAAgFC,IAAhF,GAAuF,GAAvF,GAA6FC,UAAvG,EAAmH;AACrHI,cAAAA,OAAO,EAAG;AACN,iCAAkB,YAAYH;AADxB;AAD2G,aAAnH,EAKLI,IALK,CAKCC,QAAD,IAAc,CAChB;AACH,aAPK,EAOHC,KAPG,CAOI5B,KAAD,IAAW,CAChB;AACH,aATK,CADH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAYH,CAbM;AAeP,OAAO,MAAM6B,cAAc,GAAIjC,KAAD,IAAW;AACrC,SAAQ2B,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAACR,QAAQ,CAACnB,KAAD,CAAT,CAAR;AACH,GAFD;AAGH,CAJM;AAMP,OAAO,MAAMkC,eAAe,GAAG,MAAM;AACjC,SAAQP,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAACP,SAAS,EAAV,CAAR;AACH,GAFD;AAGH,CAJM;AAMP,OAAO,MAAMe,cAAc,GAAG,MAAM;AAChC,SAAQR,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAACT,eAAe,EAAhB,CAAR;AACH,GAFD;AAGH,CAJM;AAMP,OAAO,MAAMkB,SAAS,GAAG,CAACZ,IAAD,EAAOa,OAAP,EAAgBX,KAAhB,KAA0B;AAC/C;AAAA,yEAAO,kBAAOC,QAAP;AAAA;AAAA;AAAA;AACHA,YAAAA,QAAQ,CAACf,WAAW,EAAZ,CAAR;;AADG,kBAEAc,KAAK,KAAK,KAFV;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAGO9B,KAAK,CAACgC,GAAN,CAAU,0DAA0DJ,IAA1D,GAAiE,WAAjE,GAA+Ea,OAAzF,EAAkG;AACpGR,cAAAA,OAAO,EAAG;AACN,iCAAkB,YAAYH;AADxB;AAD0F,aAAlG,EAKLI,IALK,CAKCC,QAAD,IAAc;AAChB,kBAAGO,cAAc,CAACC,OAAf,CAAuB,UAAvB,MAAuC,IAA1C,EAAgD;AAC5CD,gBAAAA,cAAc,CAACE,OAAf,CAAuB,UAAvB,EAAmCT,QAAQ,CAAChB,IAAT,CAAcA,IAAd,CAAmB0B,MAAtD;AACH,eAFD,MAEO,IAAGH,cAAc,CAACC,OAAf,CAAuB,UAAvB,MAAuCR,QAAQ,CAAChB,IAAT,CAAcA,IAAd,CAAmB0B,MAA1D,IAAoEH,cAAc,CAACC,OAAf,CAAuB,UAAvB,MAAuC,IAA9G,EAAoH;AACvHD,gBAAAA,cAAc,CAACI,UAAf,CAA0B,UAA1B;;AAEA,oBAAGJ,cAAc,CAACC,OAAf,CAAuB,UAAvB,MAAuC,IAA1C,EAAgD;AAC5CD,kBAAAA,cAAc,CAACE,OAAf,CAAuB,UAAvB,EAAmCT,QAAQ,CAAChB,IAAT,CAAcA,IAAd,CAAmB0B,MAAtD;AACH;AACJ;;AACDd,cAAAA,QAAQ,CAACb,aAAa,CAAChB,MAAM,CAACiC,QAAQ,CAAChB,IAAT,CAAcA,IAAf,CAAP,CAAd,CAAR;AACH,aAhBK,EAiBLiB,KAjBK,CAiBE5B,KAAD,IAAW,CACd;AACH,aAnBK,CAHP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAyBH,CA1BM;AA4BP,eAAe,SAASuC,aAAT,CAAuBC,KAAK,GAAG7C,YAA/B,EAA6C;AAAEc,EAAAA,IAAF;AAAQG,EAAAA;AAAR,CAA7C,EAA+D;AAC1E,UAAQH,IAAR;AACI,SAAKR,YAAL;AACA,+BACOuC,KADP;AAEI1C,QAAAA,SAAS,EAAE;AAFf;;AAIA,SAAKI,cAAL;AACA,+BACOsC,KADP;AAEI1C,QAAAA,SAAS,EAAE,KAFf;AAGID,QAAAA,MAAM,EAAE,IAHZ;AAIIE,QAAAA,MAAM,EAAEa,OAAO,CAACD,IAJpB;AAKIX,QAAAA,KAAK,EAAE;AALX;;AAOA,SAAKG,cAAL;AACA,+BACOqC,KADP;AAEI3C,QAAAA,MAAM,EAAE,KAFZ;AAGIG,QAAAA,KAAK,EAAE;AAHX;;AAKA,SAAKI,iBAAL;AACA,+BACOoC,KADP;AAEI5C,QAAAA,KAAK,EAAE,KAFX;AAGIC,QAAAA,MAAM,EAAE,KAHZ;AAIIE,QAAAA,MAAM,EAAE,KAJZ;AAKIC,QAAAA,KAAK,EAAE;AALX;;AAOA,SAAKK,SAAL;AACA,+BACOmC,KADP;AAEI5C,QAAAA,KAAK,EAAEgB,OAAO,CAAChB;AAFnB;;AAIA,SAAKU,UAAL;AACA,+BACOkC,KADP;AAEI5C,QAAAA,KAAK,EAAE;AAFX;;AAIA,SAAKW,WAAL;AACA,+BACOiC,KADP;;AAGA;AACA,aAAOA,KAAP;AA3CJ;AA6CH","sourcesContent":["import Axios from 'axios';\r\nimport { List, fromJS } from 'immutable';\r\n\r\nexport const initialState = {\r\n    keyNo: false,\r\n    isInit: false,\r\n    isLoading: false,\r\n    tables: false,\r\n    error: null\r\n};\r\n\r\nexport const START_NOTICE = \"notice/START_NOTICE\";\r\nexport const NOTICE_SUCCESS = \"notice/NOTICE_SUCCESS\";\r\nexport const NOTICE_FAILURE = \"notice/NOTICE_FAILURE\";\r\nexport const INIT_NOTICE_STORE = \"notice/INIT_NOTICE_STORE\";\r\nexport const SET_KEYNO = \"notice/SET_KEYNO\";\r\nexport const INIT_KEYNO = \"notice/INIT_KEYNO\";\r\nexport const UPDATE_READ = \"notice/UPDATE_READ\";\r\n\r\nexport const startNotice = () => ({\r\n    type: START_NOTICE\r\n});\r\n\r\nexport const noticeSuccess = (data) => ({\r\n    type: NOTICE_SUCCESS,\r\n    payload : {\r\n        data : data\r\n    }\r\n});\r\n\r\nexport const noticeFailure = () => ({\r\n    type: NOTICE_FAILURE\r\n});\r\n\r\nexport const initNoticeStore = () => ({\r\n    type: INIT_NOTICE_STORE\r\n});\r\n\r\nexport const setKeyNo = (keyNo) => ({\r\n    type: SET_KEYNO,\r\n    payload : {\r\n        keyNo : keyNo\r\n    }\r\n});\r\n\r\nexport const initKeyNo = () => ({\r\n    type: INIT_KEYNO\r\n});\r\n\r\nexport const updateRead = () => ({\r\n    type: UPDATE_READ\r\n});\r\n\r\nexport const noticeupdateRead = (key_no, auth, recordType, token) => {\r\n    return async (dispatch) => {\r\n        await Axios.get('http://218.39.221.104:8080/smartchecker/record/alarm/update/' + key_no + \"/\" + auth + \"/\" + recordType, {\r\n            headers : {\r\n                'Authorization' : 'Bearer ' + token\r\n            }\r\n        })\r\n        .then((response) => {\r\n            //console.log(response);\r\n        }).catch((error) => {\r\n            //console.log(error);\r\n        })\r\n    }\r\n}\r\n\r\nexport const setNoticeKeyNo = (keyNo) => {\r\n    return (dispatch) => {\r\n        dispatch(setKeyNo(keyNo));\r\n    }\r\n} \r\n\r\nexport const initNoticeKeyNo = () => {\r\n    return (dispatch) => {\r\n        dispatch(initKeyNo());\r\n    }\r\n}\r\n\r\nexport const setNoticeStore = () => {\r\n    return (dispatch) => {\r\n        dispatch(initNoticeStore());\r\n    }\r\n};\r\n\r\nexport const getNotice = (auth, user_no, token) => {\r\n    return async (dispatch) => {\r\n        dispatch(startNotice());\r\n        if(token !== false) {\r\n            await Axios.get('http://218.39.221.104:8080/smartchecker/record/alarm/' + auth + '?user_no=' + user_no, {\r\n                headers : {\r\n                    'Authorization' : 'Bearer ' + token\r\n                }\r\n            })\r\n            .then((response) => {\r\n                if(sessionStorage.getItem(\"alarmnum\") === null) {\r\n                    sessionStorage.setItem(\"alarmnum\", response.data.data.length);\r\n                } else if(sessionStorage.getItem(\"alarmnum\") !== response.data.data.length && sessionStorage.getItem(\"alarmnum\") !== null) {\r\n                    sessionStorage.removeItem(\"alarmnum\");\r\n\r\n                    if(sessionStorage.getItem(\"alarmnum\") === null) {\r\n                        sessionStorage.setItem(\"alarmnum\", response.data.data.length);\r\n                    }\r\n                }\r\n                dispatch(noticeSuccess(fromJS(response.data.data)));\r\n            })\r\n            .catch((error) => {\r\n                //console.log(error);\r\n            })\r\n        }\r\n    }\r\n};\r\n\r\nexport default function NoticeReducer(state = initialState, { type, payload}) {\r\n    switch (type) {\r\n        case START_NOTICE:\r\n        return {\r\n            ...state,\r\n            isLoading: true\r\n        };\r\n        case NOTICE_SUCCESS:\r\n        return {\r\n            ...state,\r\n            isLoading: false,\r\n            isInit: true,\r\n            tables: payload.data,\r\n            error: null\r\n        };\r\n        case NOTICE_FAILURE:\r\n        return {\r\n            ...state,\r\n            isInit: false,\r\n            error: true\r\n        };\r\n        case INIT_NOTICE_STORE:\r\n        return {\r\n            ...state,\r\n            keyNo: false,\r\n            isInit: false,\r\n            tables: false,\r\n            error: null\r\n        };\r\n        case SET_KEYNO:\r\n        return {\r\n            ...state,\r\n            keyNo: payload.keyNo\r\n        };\r\n        case INIT_KEYNO:\r\n        return {\r\n            ...state,\r\n            keyNo: false\r\n        };\r\n        case UPDATE_READ:\r\n        return {\r\n            ...state\r\n        };\r\n        default:\r\n        return state;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}