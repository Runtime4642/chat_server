{"ast":null,"code":"import _regeneratorRuntime from \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\src\\\\containers\\\\record\\\\RecordPaginationContainer.js\";\nimport React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport Pagination from 'components/list/Pagination';\nimport * as paginationActions from 'store/modules/pagination';\nimport * as recordActions from 'store/modules/record';\n\nclass RecordPaginationContainer extends Component {\n  constructor(...args) {\n    var _this;\n\n    super(...args);\n    _this = this;\n\n    this.handlePageChange = pageNumber => {\n      const _this$props = this.props,\n            activePage = _this$props.activePage,\n            PaginationActions = _this$props.PaginationActions;\n      PaginationActions.pageChange({\n        activePage,\n        pageNumber\n      });\n      this.handleList(pageNumber);\n    };\n\n    this.handleList = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(pageNumber) {\n        var _this$props2, RecordActions, startdate, enddate, name, content, recordType, select, no, read, _this$props3, token, auth, loginUserNo, language, searchSelect, searchNo;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _this$props2 = _this.props, RecordActions = _this$props2.RecordActions, startdate = _this$props2.startdate, enddate = _this$props2.enddate, name = _this$props2.name, content = _this$props2.content, recordType = _this$props2.recordType, select = _this$props2.select, no = _this$props2.no, read = _this$props2.read;\n              _this$props3 = _this.props, token = _this$props3.token, auth = _this$props3.auth, loginUserNo = _this$props3.loginUserNo, language = _this$props3.language;\n\n              if (auth === \"ROLE_USER\") {\n                searchSelect = true;\n                searchNo = loginUserNo;\n              } else {\n                searchSelect = select;\n                searchNo = no;\n              }\n\n              if (!(startdate === \"\" && enddate === \"\" && name === \"\" && content === \"\" && recordType === \"전체\" && read === \"전체\" && searchSelect === false)) {\n                _context.next = 14;\n                break;\n              }\n\n              _context.prev = 4;\n              _context.next = 7;\n              return RecordActions.getRecordList(pageNumber, token);\n\n            case 7:\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](4);\n              console.log(_context.t0);\n\n            case 12:\n              _context.next = 22;\n              break;\n\n            case 14:\n              _context.prev = 14;\n              _context.next = 17;\n              return RecordActions.getSearchRecordList(pageNumber, startdate, enddate, name, content, recordType, searchSelect, searchNo, read, token, language);\n\n            case 17:\n              _context.next = 22;\n              break;\n\n            case 19:\n              _context.prev = 19;\n              _context.t1 = _context[\"catch\"](14);\n              console.log(_context.t1);\n\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[4, 9], [14, 19]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    this.handlePage = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var PaginationActions, token;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            PaginationActions = _this.props.PaginationActions;\n            token = _this.props.token;\n            _context2.prev = 2;\n            _context2.next = 5;\n            return PaginationActions.getRecordTotal(token);\n\n          case 5:\n            _context2.next = 10;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](2);\n            console.log(_context2.t0);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2, null, [[2, 7]]);\n    }));\n  }\n\n  componentWillMount() {\n    const auth = this.props.auth;\n\n    if (auth === \"ROLE_ADMIN\") {\n      this.handlePage();\n    } else {\n      this.handleList(1);\n    }\n  }\n\n  componentDidMount() {\n    const PaginationActions = this.props.PaginationActions;\n    PaginationActions.initialize();\n  }\n\n  render() {\n    const _this$props4 = this.props,\n          activePage = _this$props4.activePage,\n          totalCount = _this$props4.totalCount;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Pagination, {\n      activePage: activePage,\n      totalCount: totalCount,\n      onChange: this.handlePageChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default connect(state => ({\n  activePage: state.pagination.get('activePage'),\n  totalCount: state.pagination.get('totalCount'),\n  startdate: state.record.get('startdate'),\n  enddate: state.record.get('enddate'),\n  name: state.record.get('name'),\n  content: state.record.get('newContent'),\n  select: state.record.get('select'),\n  no: state.record.get('no'),\n  read: state.record.get('newRead'),\n  recordType: state.record.get('newRecordType'),\n  token: state.login.token,\n  auth: state.login.auth,\n  loginUserNo: state.login.no,\n  language: state.language.language\n}), dispatch => ({\n  PaginationActions: bindActionCreators(paginationActions, dispatch),\n  RecordActions: bindActionCreators(recordActions, dispatch)\n}))(RecordPaginationContainer);","map":{"version":3,"sources":["F:/JAVA_WORKSPACE/frontend_react-20191018T023535Z-001/frontend_react/src/containers/record/RecordPaginationContainer.js"],"names":["React","Component","bindActionCreators","connect","Pagination","paginationActions","recordActions","RecordPaginationContainer","handlePageChange","pageNumber","props","activePage","PaginationActions","pageChange","handleList","RecordActions","startdate","enddate","name","content","recordType","select","no","read","token","auth","loginUserNo","language","searchSelect","searchNo","getRecordList","console","log","getSearchRecordList","handlePage","getRecordTotal","componentWillMount","componentDidMount","initialize","render","totalCount","state","pagination","get","record","login","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {bindActionCreators} from 'redux';\r\nimport {connect} from 'react-redux';\r\nimport Pagination from 'components/list/Pagination';\r\nimport * as paginationActions from 'store/modules/pagination';\r\nimport * as recordActions from 'store/modules/record';\r\n\r\n\r\nclass RecordPaginationContainer extends Component {\r\n\r\n    handlePageChange = (pageNumber) => {\r\n        const { activePage, PaginationActions } = this.props;\r\n\r\n        PaginationActions.pageChange({activePage, pageNumber});\r\n        this.handleList(pageNumber);\r\n    }\r\n\r\n    handleList = async(pageNumber) => {\r\n        const { RecordActions, startdate, enddate, name, content, recordType, select, no, read } = this.props;\r\n        const { token, auth, loginUserNo, language } = this.props;\r\n\r\n        let searchSelect;\r\n        let searchNo;\r\n\r\n        if(auth === \"ROLE_USER\") {\r\n            searchSelect = true;\r\n            searchNo = loginUserNo;\r\n        }\r\n        else{\r\n            searchSelect = select;\r\n            searchNo = no;\r\n        }\r\n\r\n        if(startdate === \"\" && enddate === \"\" && name === \"\" && content === \"\" && recordType === \"전체\" && read === \"전체\" && searchSelect === false) {\r\n            try {\r\n                //console.log(\"change page : \" + pageNumber);\r\n                //console.log(\"searchSelect : \" + searchSelect);\r\n\r\n                await RecordActions.getRecordList(pageNumber, token);\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n        }\r\n        else {\r\n            try{\r\n                //console.log(\"startdate : \" + startdate);\r\n                //console.log(\"enddate : \" + enddate);\r\n                //console.log(\"name : \" + name);\r\n                //console.log(\"content : \" + content);\r\n                //console.log(\"recordType : \" + recordType);\r\n                //console.log(\"searchNo : \" + searchNo);\r\n                //console.log(\"read : \" + read);\r\n                //console.log(\"searchSelect : \" + searchSelect);\r\n\r\n                await RecordActions.getSearchRecordList(pageNumber, startdate, enddate, name, content, recordType, searchSelect, searchNo, read, token, language);\r\n            } catch(e){\r\n                console.log(e);\r\n            }\r\n        }\r\n    }\r\n\r\n    handlePage = async() => {\r\n        const { PaginationActions } = this.props;\r\n        const { token } = this.props;\r\n\r\n        try{\r\n            await PaginationActions.getRecordTotal(token);\r\n        } catch(e){\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        const { auth } = this.props;\r\n\r\n        if(auth === \"ROLE_ADMIN\"){\r\n            this.handlePage();\r\n        }\r\n        else{\r\n            this.handleList(1);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { PaginationActions } = this.props;\r\n\r\n        PaginationActions.initialize();\r\n    }\r\n\r\n    render() {\r\n        const {activePage, totalCount} = this.props;\r\n\r\n        return(\r\n            <div>\r\n                <Pagination activePage={activePage} totalCount={totalCount} onChange={this.handlePageChange}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        activePage: state.pagination.get('activePage'),\r\n        totalCount: state.pagination.get('totalCount'),\r\n        startdate: state.record.get('startdate'),\r\n        enddate: state.record.get('enddate'),\r\n        name: state.record.get('name'),\r\n        content: state.record.get('newContent'),\r\n        select: state.record.get('select'),\r\n        no: state.record.get('no'),\r\n        read: state.record.get('newRead'),\r\n        recordType: state.record.get('newRecordType'),\r\n        token: state.login.token,\r\n        auth: state.login.auth,\r\n        loginUserNo: state.login.no,\r\n        language: state.language.language\r\n    }),\r\n    (dispatch) => ({\r\n        PaginationActions: bindActionCreators(paginationActions, dispatch),\r\n        RecordActions: bindActionCreators(recordActions, dispatch)\r\n    })\r\n)(RecordPaginationContainer);"]},"metadata":{},"sourceType":"module"}