{"ast":null,"code":"import _toConsumableArray from \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\src\\\\components\\\\chat\\\\chat.js\";\nimport React, { Component } from 'react';\nimport { Input } from 'antd';\nimport './chat.css';\nimport SockJsClient from \"react-stomp\";\nimport UsernameGenerator from \"username-generator\";\nimport Fetch from \"json-fetch\";\nimport { TalkBox } from \"react-talk\";\nimport randomstring from \"randomstring\";\n\nvar chat =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(chat, _Component);\n\n  function chat(props, context) {\n    var _this;\n\n    _classCallCheck(this, chat);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(chat).call(this, props));\n\n    _this.onMessageReceive = function (msg, topic) {\n      _this.setState(function (prevState) {\n        return {\n          messages: [].concat(_toConsumableArray(prevState.messages), [msg])\n        };\n      });\n    };\n\n    _this.sendMessage = function (msg, selfMsg) {\n      try {\n        var send_message = {\n          \"user\": selfMsg.author,\n          \"message\": selfMsg.message\n        };\n\n        _this.clientRef.sendMessage(\"/app/message\", JSON.stringify(send_message));\n\n        return true;\n      } catch (e) {\n        return false;\n      }\n    };\n\n    _this.randomUserName = UsernameGenerator.generateUsername(\"-\");\n    _this.randomUserId = randomstring.generate();\n    _this.sendURL = \"/message\";\n    _this.state = {\n      clientConnected: false,\n      messages: []\n    };\n    return _this;\n  }\n\n  _createClass(chat, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      console.log(\"call history\");\n      Fetch(\"/history\", {\n        method: \"GET\"\n      }).then(function (response) {\n        _this2.setState({\n          messages: response.body\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var wsSourceUrl = \"http://localhost:8076/chat\";\n      var Search = Input.Search;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(TalkBox, {\n        topic: \"/topic/public\",\n        currentUserId: this.randomUserId,\n        currentUser: this.randomUserName,\n        messages: this.state.messages,\n        onSendMessage: this.sendMessage,\n        connected: this.state.clientConnected,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }), React.createElement(SockJsClient, {\n        url: wsSourceUrl,\n        topics: [\"/topic/public\"],\n        onMessage: this.onMessageReceive,\n        ref: function ref(client) {\n          _this3.clientRef = client;\n        },\n        onConnect: function onConnect() {\n          _this3.setState({\n            clientConnected: true\n          });\n        },\n        onDisconnect: function onDisconnect() {\n          _this3.setState({\n            clientConnected: false\n          });\n        },\n        debug: false,\n        style: [{\n          width: '100%',\n          height: '100%'\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      })) // <div>\n      //     <div id=\"container\">\n      //         <div id=\"chatView\">\n      //             <div class=\"msg\" id=\"chat-me\">\n      //                 정영석\n      //             <li class=\"msgBox\">채팅1</li>\n      //             </div>\n      //             <div class=\"msg\" id=\"chat-other\">\n      //                 남영덕\n      //             <li class=\"msgBox\">채팅2</li>\n      //             </div>\n      //             <div class=\"msg\" id=\"chat-other\">\n      //                 최기석\n      //             <li class=\"msgBox\">채팅3</li>\n      //             </div>\n      //         </div>\n      //         <Search\n      //                 placeholder=\"보낼 메시지를 입력하세요\"\n      //                 enterButton=\"보내기\"\n      //                 size=\"large\"\n      //                 onSearch={value => console.log(value)}\n      //         />\n      //     </div>  \n      // </div>\n      ;\n    }\n  }]);\n\n  return chat;\n}(Component);\n\nexport default chat;","map":{"version":3,"sources":["F:/JAVA_WORKSPACE/frontend_react-20191018T023535Z-001/frontend_react/src/components/chat/chat.js"],"names":["React","Component","Input","SockJsClient","UsernameGenerator","Fetch","TalkBox","randomstring","chat","props","context","onMessageReceive","msg","topic","setState","prevState","messages","sendMessage","selfMsg","send_message","author","message","clientRef","JSON","stringify","e","randomUserName","generateUsername","randomUserId","generate","sendURL","state","clientConnected","console","log","method","then","response","body","wsSourceUrl","Search","client","width","height"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {Input} from 'antd';\r\nimport './chat.css';\r\nimport SockJsClient from \"react-stomp\";\r\nimport UsernameGenerator from \"username-generator\";\r\nimport Fetch from \"json-fetch\";\r\nimport { TalkBox } from \"react-talk\";\r\nimport randomstring from\"randomstring\";\r\n\r\n\r\nclass chat extends Component {\r\n\r\n    constructor(props, context) {\r\n        super(props);\r\n\r\n        this.randomUserName = UsernameGenerator.generateUsername(\"-\");\r\n        this.randomUserId = randomstring.generate();\r\n        this.sendURL = \"/message\";\r\n        this.state = {\r\n        clientConnected : false,\r\n        messages : []\r\n        };\r\n    }\r\n\r\n    onMessageReceive = (msg, topic) => {\r\n        this.setState(prevState => ({\r\n          messages: [...prevState.messages, msg]\r\n        }));\r\n      }\r\n    \r\n      sendMessage = (msg, selfMsg) => {\r\n        try {\r\n          var send_message = {\r\n            \"user\" : selfMsg.author,\r\n            \"message\" : selfMsg.message\r\n          }\r\n          this.clientRef.sendMessage(\"/app/message\", JSON.stringify(send_message));\r\n          return true;\r\n        } catch(e) {\r\n          return false;\r\n        }\r\n      }\r\n    \r\n\r\n      componentWillMount() {\r\n        console.log(\"call history\");\r\n        Fetch(\"/history\", {\r\n          method: \"GET\"\r\n        }).then((response) => {\r\n          this.setState({ messages: response.body });\r\n        });\r\n      }\r\n    \r\n    \r\n\r\n    render() {\r\n\r\n        const wsSourceUrl = \"http://localhost:8076/chat\";\r\n         const { Search } = Input;\r\n        return (\r\n            <div>\r\n            <TalkBox topic=\"/topic/public\" currentUserId={ this.randomUserId }\r\n              currentUser={ this.randomUserName } messages={ this.state.messages }\r\n              onSendMessage={ this.sendMessage } connected={ this.state.clientConnected }/>\r\n            \r\n            <SockJsClient url={ wsSourceUrl } topics={[\"/topic/public\"]}\r\n              onMessage={ this.onMessageReceive } ref={ (client) => { this.clientRef = client }}\r\n              onConnect={ () => {this.setState({ clientConnected: true }) } }\r\n              onDisconnect={ () => { this.setState({ clientConnected: false }) } }\r\n              debug={ false } style={[{width:'100%', height:'100%'}]}/>\r\n          </div>\r\n            // <div>\r\n            //     <div id=\"container\">\r\n            //         <div id=\"chatView\">\r\n            //             <div class=\"msg\" id=\"chat-me\">\r\n            //                 정영석\r\n            //             <li class=\"msgBox\">채팅1</li>\r\n            //             </div>\r\n            //             <div class=\"msg\" id=\"chat-other\">\r\n            //                 남영덕\r\n            //             <li class=\"msgBox\">채팅2</li>\r\n            //             </div>\r\n            //             <div class=\"msg\" id=\"chat-other\">\r\n            //                 최기석\r\n            //             <li class=\"msgBox\">채팅3</li>\r\n            //             </div>\r\n            //         </div>\r\n            //         <Search\r\n            //                 placeholder=\"보낼 메시지를 입력하세요\"\r\n            //                 enterButton=\"보내기\"\r\n            //                 size=\"large\"\r\n            //                 onSearch={value => console.log(value)}\r\n            //         />\r\n            //     </div>  \r\n            // </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default chat;"]},"metadata":{},"sourceType":"module"}