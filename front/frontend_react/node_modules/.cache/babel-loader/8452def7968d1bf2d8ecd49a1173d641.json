{"ast":null,"code":"import { withTheme } from '@material-ui/core/styles';\nimport { compose, withState, withHandlers, lifecycle } from 'recompose';\nimport { connect } from 'react-redux';\nimport { withRouter } from \"react-router-dom\";\nimport { toggleSidebar } from '../Layout/LayoutState';\nimport SidebarView from './SidebarView';\nexport default compose(withRouter, withTheme(), connect(state => ({\n  isSidebarOpened: state.layout.isSidebarOpened,\n  auth: state.login.auth,\n  language: state.language.language,\n  starttime: state.time.get('starttime'),\n  endtime: state.time.get('endtime')\n}), {\n  toggleSidebar\n}), withState('isPermanent', 'setPermanent', true), withHandlers({\n  handleWindowWidthChange: ({\n    width,\n    isPermanent,\n    setPermanent,\n    theme\n  }) => () => {\n    const windowWidth = window.innerWidth;\n    const breakpointWidth = theme.breakpoints.values.md;\n    const isSmallScreen = windowWidth < breakpointWidth;\n\n    if (isSmallScreen && isPermanent) {\n      setPermanent(false);\n    } else if (!isSmallScreen && !isPermanent) {\n      setPermanent(true);\n    }\n  }\n}), lifecycle({\n  componentWillMount() {\n    window.addEventListener('resize', this.props.handleWindowWidthChange);\n    this.props.handleWindowWidthChange();\n  },\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.props.handleWindowWidthChange);\n  }\n\n}))(SidebarView);","map":{"version":3,"sources":["F:/JAVA_WORKSPACE/frontend_react-20191018T023535Z-001/frontend_react/src/components/Sidebar/SidebarContainer.js"],"names":["withTheme","compose","withState","withHandlers","lifecycle","connect","withRouter","toggleSidebar","SidebarView","state","isSidebarOpened","layout","auth","login","language","starttime","time","get","endtime","handleWindowWidthChange","width","isPermanent","setPermanent","theme","windowWidth","window","innerWidth","breakpointWidth","breakpoints","values","md","isSmallScreen","componentWillMount","addEventListener","props","componentWillUnmount","removeEventListener"],"mappings":"AAAA,SAASA,SAAT,QAA0B,0BAA1B;AACA,SAASC,OAAT,EAAkBC,SAAlB,EAA6BC,YAA7B,EAA2CC,SAA3C,QAA6D,WAA7D;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,SAASC,aAAT,QAA8B,uBAA9B;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,eAAeP,OAAO,CACpBK,UADoB,EAEpBN,SAAS,EAFW,EAGpBK,OAAO,CACLI,KAAK,KAAK;AACRC,EAAAA,eAAe,EAAED,KAAK,CAACE,MAAN,CAAaD,eADtB;AAERE,EAAAA,IAAI,EAAEH,KAAK,CAACI,KAAN,CAAYD,IAFV;AAGRE,EAAAA,QAAQ,EAAEL,KAAK,CAACK,QAAN,CAAeA,QAHjB;AAIRC,EAAAA,SAAS,EAAEN,KAAK,CAACO,IAAN,CAAWC,GAAX,CAAe,WAAf,CAJH;AAKRC,EAAAA,OAAO,EAAET,KAAK,CAACO,IAAN,CAAWC,GAAX,CAAe,SAAf;AALD,CAAL,CADA,EAQL;AAAEV,EAAAA;AAAF,CARK,CAHa,EAapBL,SAAS,CAAC,aAAD,EAAgB,cAAhB,EAAgC,IAAhC,CAbW,EAcpBC,YAAY,CAAC;AACXgB,EAAAA,uBAAuB,EAAE,CAAC;AAAEC,IAAAA,KAAF;AAASC,IAAAA,WAAT;AAAsBC,IAAAA,YAAtB;AAAoCC,IAAAA;AAApC,GAAD,KAAiD,MAAM;AAC9E,UAAMC,WAAW,GAAGC,MAAM,CAACC,UAA3B;AACA,UAAMC,eAAe,GAAGJ,KAAK,CAACK,WAAN,CAAkBC,MAAlB,CAAyBC,EAAjD;AACA,UAAMC,aAAa,GAAGP,WAAW,GAAGG,eAApC;;AAEA,QAAII,aAAa,IAAIV,WAArB,EAAkC;AAChCC,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAFD,MAEO,IAAI,CAACS,aAAD,IAAkB,CAACV,WAAvB,EAAoC;AACzCC,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;AACF;AAXU,CAAD,CAdQ,EA2BpBlB,SAAS,CAAC;AACR4B,EAAAA,kBAAkB,GAAG;AACnBP,IAAAA,MAAM,CAACQ,gBAAP,CAAwB,QAAxB,EAAkC,KAAKC,KAAL,CAAWf,uBAA7C;AACA,SAAKe,KAAL,CAAWf,uBAAX;AACD,GAJO;;AAKRgB,EAAAA,oBAAoB,GAAG;AACrBV,IAAAA,MAAM,CAACW,mBAAP,CAA2B,QAA3B,EAAqC,KAAKF,KAAL,CAAWf,uBAAhD;AACD;;AAPO,CAAD,CA3BW,CAAP,CAoCbX,WApCa,CAAf","sourcesContent":["import { withTheme } from '@material-ui/core/styles';\r\nimport { compose, withState, withHandlers, lifecycle }  from 'recompose';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { toggleSidebar } from '../Layout/LayoutState';\r\n\r\nimport SidebarView from './SidebarView';\r\n\r\nexport default compose(\r\n  withRouter,\r\n  withTheme(),\r\n  connect(\r\n    state => ({\r\n      isSidebarOpened: state.layout.isSidebarOpened,\r\n      auth: state.login.auth,\r\n      language: state.language.language,\r\n      starttime: state.time.get('starttime'),\r\n      endtime: state.time.get('endtime')\r\n    }),\r\n    { toggleSidebar },\r\n  ),\r\n  withState('isPermanent', 'setPermanent', true),\r\n  withHandlers({\r\n    handleWindowWidthChange: ({ width, isPermanent, setPermanent, theme }) => () => {\r\n      const windowWidth = window.innerWidth;\r\n      const breakpointWidth = theme.breakpoints.values.md;\r\n      const isSmallScreen = windowWidth < breakpointWidth;\r\n\r\n      if (isSmallScreen && isPermanent) {\r\n        setPermanent(false);\r\n      } else if (!isSmallScreen && !isPermanent) {\r\n        setPermanent(true);\r\n      }\r\n    }\r\n  }),\r\n  lifecycle({\r\n    componentWillMount() {\r\n      window.addEventListener('resize', this.props.handleWindowWidthChange);\r\n      this.props.handleWindowWidthChange();\r\n    },\r\n    componentWillUnmount() {\r\n      window.removeEventListener('resize', this.props.handleWindowWidthChange);\r\n    },\r\n  }),\r\n)(SidebarView);\r\n"]},"metadata":{},"sourceType":"module"}