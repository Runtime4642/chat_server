{"ast":null,"code":"var assert = require('./assert');\n\nvar isTypeName = require('./isTypeName');\n\nvar forbidNewOperator = require('./forbidNewOperator');\n\nvar isNumber = require('./isNumber');\n\nvar isString = require('./isString');\n\nvar isObject = require('./isObject');\n\nfunction getDefaultName(map) {\n  return Object.keys(map).map(function (k) {\n    return assert.stringify(k);\n  }).join(' | ');\n}\n\nfunction enums(map, name) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isObject(map), function () {\n      return 'Invalid argument map ' + assert.stringify(map) + ' supplied to enums(map, [name]) combinator (expected a dictionary of String -> String | Number)';\n    });\n    assert(isTypeName(name), function () {\n      return 'Invalid argument name ' + assert.stringify(name) + ' supplied to enums(map, [name]) combinator (expected a string)';\n    });\n  }\n\n  var displayName = name || getDefaultName(map);\n\n  function Enums(value, path) {\n    if (process.env.NODE_ENV !== 'production') {\n      forbidNewOperator(this, Enums);\n      path = path || [displayName];\n      assert(Enums.is(value), function () {\n        return 'Invalid value ' + assert.stringify(value) + ' supplied to ' + path.join('/') + ' (expected one of ' + assert.stringify(Object.keys(map)) + ')';\n      });\n    }\n\n    return value;\n  }\n\n  Enums.meta = {\n    kind: 'enums',\n    map: map,\n    name: name,\n    identity: true\n  };\n  Enums.displayName = displayName;\n\n  Enums.is = function (x) {\n    return (isString(x) || isNumber(x)) && map.hasOwnProperty(x);\n  };\n\n  return Enums;\n}\n\nenums.of = function (keys, name) {\n  keys = isString(keys) ? keys.split(' ') : keys;\n  var value = {};\n  keys.forEach(function (k) {\n    value[k] = k;\n  });\n  return enums(value, name);\n};\n\nenums.getDefaultName = getDefaultName;\nmodule.exports = enums;","map":null,"metadata":{},"sourceType":"script"}