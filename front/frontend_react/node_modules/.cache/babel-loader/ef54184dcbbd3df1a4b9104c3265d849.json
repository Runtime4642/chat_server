{"ast":null,"code":"var assert = require('./assert');\n\nvar isTypeName = require('./isTypeName');\n\nvar isFunction = require('./isFunction');\n\nvar getTypeName = require('./getTypeName');\n\nvar isIdentity = require('./isIdentity');\n\nvar isObject = require('./isObject');\n\nvar create = require('./create');\n\nvar is = require('./is');\n\nfunction getDefaultName(domain, codomain) {\n  return '{[key: ' + getTypeName(domain) + ']: ' + getTypeName(codomain) + '}';\n}\n\nfunction dict(domain, codomain, name) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isFunction(domain), function () {\n      return 'Invalid argument domain ' + assert.stringify(domain) + ' supplied to dict(domain, codomain, [name]) combinator (expected a type)';\n    });\n    assert(isFunction(codomain), function () {\n      return 'Invalid argument codomain ' + assert.stringify(codomain) + ' supplied to dict(domain, codomain, [name]) combinator (expected a type)';\n    });\n    assert(isTypeName(name), function () {\n      return 'Invalid argument name ' + assert.stringify(name) + ' supplied to dict(domain, codomain, [name]) combinator (expected a string)';\n    });\n  }\n\n  var displayName = name || getDefaultName(domain, codomain);\n  var domainNameCache = getTypeName(domain);\n  var codomainNameCache = getTypeName(codomain);\n  var identity = isIdentity(domain) && isIdentity(codomain);\n\n  function Dict(value, path) {\n    if (process.env.NODE_ENV === 'production') {\n      if (identity) {\n        return value; // just trust the input if elements must not be hydrated\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      path = path || [displayName];\n      assert(isObject(value), function () {\n        return 'Invalid value ' + assert.stringify(value) + ' supplied to ' + path.join('/');\n      });\n    }\n\n    var idempotent = true; // will remain true if I can reutilise the input\n\n    var ret = {}; // make a temporary copy, will be discarded if idempotent remains true\n\n    for (var k in value) {\n      if (value.hasOwnProperty(k)) {\n        k = create(domain, k, process.env.NODE_ENV !== 'production' ? path.concat(domainNameCache) : null);\n        var actual = value[k];\n        var instance = create(codomain, actual, process.env.NODE_ENV !== 'production' ? path.concat(k + ': ' + codomainNameCache) : null);\n        idempotent = idempotent && actual === instance;\n        ret[k] = instance;\n      }\n    }\n\n    if (idempotent) {\n      // implements idempotency\n      ret = value;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      Object.freeze(ret);\n    }\n\n    return ret;\n  }\n\n  Dict.meta = {\n    kind: 'dict',\n    domain: domain,\n    codomain: codomain,\n    name: name,\n    identity: identity\n  };\n  Dict.displayName = displayName;\n\n  Dict.is = function (x) {\n    if (!isObject(x)) {\n      return false;\n    }\n\n    for (var k in x) {\n      if (x.hasOwnProperty(k)) {\n        if (!is(k, domain) || !is(x[k], codomain)) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  };\n\n  Dict.update = function (instance, patch) {\n    return Dict(assert.update(instance, patch));\n  };\n\n  return Dict;\n}\n\ndict.getDefaultName = getDefaultName;\nmodule.exports = dict;","map":null,"metadata":{},"sourceType":"script"}