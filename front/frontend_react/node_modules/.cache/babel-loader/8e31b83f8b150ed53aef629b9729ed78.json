{"ast":null,"code":"import { compose, lifecycle } from 'recompose';\nimport { connect } from 'react-redux';\nimport { getUser } from 'pages/login/LoginState';\nimport { changeLanguage } from 'store/modules/language';\nimport AppView from './App';\nexport default compose(connect(function (state) {\n  return {\n    isAuthenticated: state.login.isAuthenticated,\n    isLogging: state.login.isLogging,\n    language: state.language.language,\n    init: state.language.init\n  };\n}, {\n  getUser: getUser,\n  changeLanguage: changeLanguage\n}), lifecycle({\n  componentDidMount: function componentDidMount() {\n    var _this$props = this.props,\n        isAuthenticated = _this$props.isAuthenticated,\n        isLogging = _this$props.isLogging,\n        language = _this$props.language,\n        init = _this$props.init,\n        getUser = _this$props.getUser,\n        changeLanguage = _this$props.changeLanguage;\n\n    if (sessionStorage.getItem(\"language\") === null) {\n      sessionStorage.setItem(\"language\", \"ko\");\n    } // storage의 language와 store의 language가 다를 경우(새로 고침했을 경우)\n\n\n    if (language !== sessionStorage.getItem(\"language\") && sessionStorage.getItem(\"language\") !== null && init === false) {\n      changeLanguage(sessionStorage.getItem(\"language\"));\n    } // 새로고침했을 경우 storage에 저장된 토큰을 이용해 다시 유저 정보 요청\n\n\n    if (isAuthenticated && isLogging === false) {\n      getUser(sessionStorage.getItem(\"id_token\"));\n    }\n  }\n}))(AppView);","map":{"version":3,"sources":["F:/JAVA_WORKSPACE/frontend_react-20191018T023535Z-001/frontend_react/src/components/AppContainer.js"],"names":["compose","lifecycle","connect","getUser","changeLanguage","AppView","state","isAuthenticated","login","isLogging","language","init","componentDidMount","props","sessionStorage","getItem","setItem"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,SAAlB,QAAmC,WAAnC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,cAAT,QAA+B,wBAA/B;AAEA,OAAOC,OAAP,MAAoB,OAApB;AAEA,eAAeL,OAAO,CACpBE,OAAO,CACL,UAAAI,KAAK;AAAA,SAAK;AACRC,IAAAA,eAAe,EAAED,KAAK,CAACE,KAAN,CAAYD,eADrB;AAERE,IAAAA,SAAS,EAAEH,KAAK,CAACE,KAAN,CAAYC,SAFf;AAGRC,IAAAA,QAAQ,EAAEJ,KAAK,CAACI,QAAN,CAAeA,QAHjB;AAIRC,IAAAA,IAAI,EAAEL,KAAK,CAACI,QAAN,CAAeC;AAJb,GAAL;AAAA,CADA,EAOL;AAAER,EAAAA,OAAO,EAAPA,OAAF;AAAWC,EAAAA,cAAc,EAAdA;AAAX,CAPK,CADa,EAUpBH,SAAS,CAAC;AACRW,EAAAA,iBADQ,+BACY;AAAA,sBAC4D,KAAKC,KADjE;AAAA,QACXN,eADW,eACXA,eADW;AAAA,QACME,SADN,eACMA,SADN;AAAA,QACiBC,QADjB,eACiBA,QADjB;AAAA,QAC2BC,IAD3B,eAC2BA,IAD3B;AAAA,QACiCR,OADjC,eACiCA,OADjC;AAAA,QAC0CC,cAD1C,eAC0CA,cAD1C;;AAElB,QAAGU,cAAc,CAACC,OAAf,CAAuB,UAAvB,MAAuC,IAA1C,EAAgD;AAC9CD,MAAAA,cAAc,CAACE,OAAf,CAAuB,UAAvB,EAAmC,IAAnC;AACD,KAJiB,CAMlB;;;AACA,QAAGN,QAAQ,KAAKI,cAAc,CAACC,OAAf,CAAuB,UAAvB,CAAb,IACCD,cAAc,CAACC,OAAf,CAAuB,UAAvB,MAAuC,IADxC,IAECJ,IAAI,KAAK,KAFb,EAEoB;AACdP,MAAAA,cAAc,CAACU,cAAc,CAACC,OAAf,CAAuB,UAAvB,CAAD,CAAd;AAEL,KAZiB,CAclB;;;AACA,QAAGR,eAAe,IAAIE,SAAS,KAAK,KAApC,EAA2C;AACzCN,MAAAA,OAAO,CAACW,cAAc,CAACC,OAAf,CAAuB,UAAvB,CAAD,CAAP;AACD;AACF;AAnBO,CAAD,CAVW,CAAP,CA+BbV,OA/Ba,CAAf","sourcesContent":["import { compose, lifecycle } from 'recompose';\r\nimport { connect } from 'react-redux';\r\nimport { getUser } from 'pages/login/LoginState';\r\nimport { changeLanguage } from 'store/modules/language';\r\n\r\nimport AppView from './App';\r\n\r\nexport default compose(\r\n  connect(\r\n    state => ({\r\n      isAuthenticated: state.login.isAuthenticated,\r\n      isLogging: state.login.isLogging,\r\n      language: state.language.language,\r\n      init: state.language.init\r\n    }),\r\n    { getUser, changeLanguage }\r\n  ),\r\n  lifecycle({\r\n    componentDidMount() {\r\n      const {isAuthenticated, isLogging, language, init, getUser, changeLanguage} = this.props;\r\n      if(sessionStorage.getItem(\"language\") === null) {\r\n        sessionStorage.setItem(\"language\", \"ko\");\r\n      }\r\n\r\n      // storage의 language와 store의 language가 다를 경우(새로 고침했을 경우)\r\n      if(language !== sessionStorage.getItem(\"language\") &&\r\n          sessionStorage.getItem(\"language\") !== null &&\r\n          init === false) {\r\n            changeLanguage(sessionStorage.getItem(\"language\"));\r\n\r\n      }\r\n\r\n      // 새로고침했을 경우 storage에 저장된 토큰을 이용해 다시 유저 정보 요청\r\n      if(isAuthenticated && isLogging === false) {\r\n        getUser(sessionStorage.getItem(\"id_token\"));\r\n      }\r\n    }\r\n  })\r\n)(AppView);"]},"metadata":{},"sourceType":"module"}