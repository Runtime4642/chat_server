{"ast":null,"code":"import _regeneratorRuntime from \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\src\\\\containers\\\\list\\\\LIstTableContainer.js\";\nimport React, { Component } from 'react';\nimport TableList from 'components/list/TableList';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport * as listActions from 'store/modules/list';\nimport * as getCalList from 'store/modules/commutecalendarlist';\nimport * as stateActions from 'store/modules/state';\nimport * as paginationList from 'store/modules/pagination';\nimport locale from 'locale';\n\nclass LIstTableContainer extends Component {\n  constructor(...args) {\n    var _this;\n\n    super(...args);\n    _this = this;\n    this.getFullList = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _this$props, activePage, ListActions, select, GetCalList, PaginationActions, language, _this$props2, token, auth, loginUserNo, date, dateString, search, listSearch, pageNumber;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _this$props = _this.props, activePage = _this$props.activePage, ListActions = _this$props.ListActions, select = _this$props.select, GetCalList = _this$props.GetCalList, PaginationActions = _this$props.PaginationActions, language = _this$props.language;\n            _this$props2 = _this.props, token = _this$props2.token, auth = _this$props2.auth, loginUserNo = _this$props2.loginUserNo;\n            _context.prev = 2;\n\n            if (!(auth === \"ROLE_ADMIN\")) {\n              _context.next = 8;\n              break;\n            }\n\n            _context.next = 6;\n            return ListActions.getTableList('', activePage, select, token, language);\n\n          case 6:\n            _context.next = 19;\n            break;\n\n          case 8:\n            date = new Date();\n            dateString = new Date(date.getTime() - date.getTimezoneOffset() * 60000).toISOString().split(\"T\")[0].substring(0, 7);\n            search = {\n              searchFromDate: dateString,\n              searchUserNo: loginUserNo,\n              searchState: \"전체\"\n            };\n            listSearch = {\n              searchUserNo: loginUserNo,\n              select: true\n            };\n            pageNumber = 1;\n            _context.next = 15;\n            return PaginationActions.getSearchPage(listSearch, token);\n\n          case 15:\n            _context.next = 17;\n            return ListActions.getTableList(listSearch, pageNumber, listSearch.select, token, language);\n\n          case 17:\n            _context.next = 19;\n            return GetCalList.getList(search, token, true);\n\n          case 19:\n            _context.next = 24;\n            break;\n\n          case 21:\n            _context.prev = 21;\n            _context.t0 = _context[\"catch\"](2);\n            console.log(_context.t0);\n\n          case 24:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[2, 21]]);\n    }));\n\n    this.getAlarmSearchList = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(keyNo) {\n        var _this$props3, token, language, PaginationActions, ListActions, StateActions, pageNumber, search;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _this$props3 = _this.props, token = _this$props3.token, language = _this$props3.language, PaginationActions = _this$props3.PaginationActions, ListActions = _this$props3.ListActions, StateActions = _this$props3.StateActions;\n              pageNumber = 1;\n              search = {\n                keyNo,\n                select: false\n              };\n              _context2.prev = 3;\n              _context2.next = 6;\n              return StateActions.getCommuteSearchStateList(search, token);\n\n            case 6:\n              _context2.next = 8;\n              return PaginationActions.getSearchPage(search, token);\n\n            case 8:\n              _context2.next = 10;\n              return ListActions.getTableList(search, pageNumber, search.select, token, language);\n\n            case 10:\n              _context2.next = 15;\n              break;\n\n            case 12:\n              _context2.prev = 12;\n              _context2.t0 = _context2[\"catch\"](3);\n              console.log(_context2.t0);\n\n            case 15:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[3, 12]]);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    this.updateRead = no => {\n      const _this$props4 = this.props,\n            token = _this$props4.token,\n            auth = _this$props4.auth,\n            ListActions = _this$props4.ListActions;\n      const recordType = \"출퇴근\";\n      ListActions.updateRead(no, auth, recordType, token);\n    };\n\n    this.handleChangeInput = ({\n      name,\n      value\n    }) => {\n      const _this$props5 = this.props,\n            ListActions = _this$props5.ListActions,\n            auth = _this$props5.auth; // 권한이 유저일 경우에 출퇴근 칼럼 클릭시 read update\n\n      if (name === 'startNo' && auth === 'ROLE_USER') {\n        this.updateRead(value);\n      }\n\n      ListActions.changeInput({\n        name,\n        value\n      });\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    document.title = locale.commuteListTitle[nextProps.language];\n\n    if (nextProps.userNo !== this.props.userNo) {\n      this.handleChangeInput({\n        name: 'userNo',\n        value: nextProps.userNo\n      });\n    }\n\n    return true;\n  }\n\n  componentDidMount() {\n    const language = this.props.language;\n    document.title = locale.commuteListTitle[language];\n  }\n  /* \r\n  주영돈 : WorkAttitudeListContainer.js의 getAlarmSearchList처럼\r\n  keyNo에 대한 데이터 가져오는 코드 작성하시면 됩니다.\r\n  */\n\n\n  componentWillMount() {\n    const auth = this.props.auth;\n    let keyNo = null;\n\n    if (sessionStorage.getItem(\"listkeyNo\") !== \"define\") {\n      keyNo = sessionStorage.getItem(\"listkeyNo\");\n      sessionStorage.removeItem(\"listkeyNo\");\n      sessionStorage.setItem(\"listkeyNo\", \"define\");\n    } // USER가 알림(출퇴근 수정) 클릭했을 경우\n\n\n    if (keyNo !== null && auth === 'ROLE_USER') {\n      this.getAlarmSearchList(keyNo);\n    } else {\n      this.getFullList();\n    }\n  } // (list, calendar)리스트 클릭시 updateRead액션 발생\n  // MongoDB의 key_no와 startNo가 일치하면 read true로 update\n\n\n  render() {\n    const _this$props6 = this.props,\n          tables = _this$props6.tables,\n          loading = _this$props6.loading,\n          changeView = _this$props6.changeView,\n          language = _this$props6.language;\n    const handleChangeInput = this.handleChangeInput;\n    if (changeView !== 'table') return null;\n    if (loading && tables <= 0) return null;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TableList, {\n      language: language,\n      tables: tables,\n      handleChangeInput: handleChangeInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default connect(state => ({\n  tables: state.list.get('tables'),\n  changeView: state.list.get('changeView'),\n  startNo: state.list.get('startNo'),\n  endNo: state.list.get('endNo'),\n  select: state.list.get('select'),\n  userNo: state.list.get('userNo'),\n  loading: state.pender.pending['list/FULL_TABLE_LIST'],\n  activePage: state.pagination.get('activePage'),\n  token: state.login.token,\n  auth: state.login.auth,\n  loginUserNo: state.login.no,\n  language: state.language.language\n}), dispatch => ({\n  ListActions: bindActionCreators(listActions, dispatch),\n  GetCalList: bindActionCreators(getCalList, dispatch),\n  StateActions: bindActionCreators(stateActions, dispatch),\n  PaginationActions: bindActionCreators(paginationList, dispatch)\n}))(LIstTableContainer);","map":{"version":3,"sources":["F:/JAVA_WORKSPACE/frontend_react-20191018T023535Z-001/frontend_react/src/containers/list/LIstTableContainer.js"],"names":["React","Component","TableList","bindActionCreators","connect","listActions","getCalList","stateActions","paginationList","locale","LIstTableContainer","getFullList","props","activePage","ListActions","select","GetCalList","PaginationActions","language","token","auth","loginUserNo","getTableList","date","Date","dateString","getTime","getTimezoneOffset","toISOString","split","substring","search","searchFromDate","searchUserNo","searchState","listSearch","pageNumber","getSearchPage","getList","console","log","getAlarmSearchList","keyNo","StateActions","getCommuteSearchStateList","updateRead","no","recordType","handleChangeInput","name","value","changeInput","shouldComponentUpdate","nextProps","nextState","document","title","commuteListTitle","userNo","componentDidMount","componentWillMount","sessionStorage","getItem","removeItem","setItem","render","tables","loading","changeView","state","list","get","startNo","endNo","pender","pending","pagination","login","dispatch"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport TableList from 'components/list/TableList';\r\nimport {bindActionCreators} from 'redux';\r\nimport {connect} from 'react-redux';\r\nimport * as listActions from 'store/modules/list';\r\nimport * as getCalList from 'store/modules/commutecalendarlist';\r\nimport * as stateActions from 'store/modules/state';\r\nimport * as paginationList from 'store/modules/pagination';\r\nimport locale from 'locale';\r\n\r\n\r\nclass LIstTableContainer extends Component {\r\n\r\n    /*\r\n    getPostList = () => {\r\n        // 페이지와 태그 값을 부모로부터 받아 옵니다.\r\n        const { activePage, ListActions } = this.props;\r\n        \r\n        const search = {\r\n            startdate : '2019-04-25',\r\n            enddate : '2019-04-25',\r\n            name : '박성혜'\r\n        }\r\n        const page = activePage;\r\n        //console.log(search);\r\n        ListActions.getTableList(search, page);\r\n      }\r\n    \r\n    componentDidMount() {\r\n    this.getPostList();\r\n    }\r\n    */\r\n\r\n    getFullList = async() => {\r\n        const { activePage, ListActions, select, GetCalList, PaginationActions, language } = this.props;\r\n        const { token,auth,loginUserNo } = this.props;\r\n        \r\n        try {\r\n\r\n            if (auth === \"ROLE_ADMIN\") {\r\n                await ListActions.getTableList('', activePage, select, token, language);\r\n            } else {\r\n\r\n                let date = new Date();\r\n                let dateString = new Date(date.getTime() - (date.getTimezoneOffset() * 60000 ))\r\n                                        .toISOString()\r\n                                        .split(\"T\")[0].substring(0,7);\r\n\r\n                const search = {\r\n                    searchFromDate: dateString,\r\n                    searchUserNo: loginUserNo,\r\n                    searchState: \"전체\"\r\n                }\r\n\r\n                const listSearch = {\r\n                    searchUserNo:loginUserNo,\r\n                    select:true\r\n                }\r\n                \r\n                const pageNumber = 1;\r\n                await PaginationActions.getSearchPage(listSearch, token);\r\n                await ListActions.getTableList(listSearch, pageNumber, listSearch.select, token, language);\r\n                //달력\r\n                await GetCalList.getList(search, token, true);\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        document.title = locale.commuteListTitle[nextProps.language];\r\n\r\n        if (nextProps.userNo !== this.props.userNo) {\r\n            this.handleChangeInput({name: 'userNo', value: nextProps.userNo});\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { language } = this.props;\r\n        document.title = locale.commuteListTitle[language];\r\n    }\r\n\r\n    /* \r\n    주영돈 : WorkAttitudeListContainer.js의 getAlarmSearchList처럼\r\n    keyNo에 대한 데이터 가져오는 코드 작성하시면 됩니다.\r\n    */\r\n    getAlarmSearchList = async(keyNo) => {\r\n        const { token, language, PaginationActions, ListActions, StateActions } = this.props;\r\n        const pageNumber = 1;\r\n\r\n        const search = {\r\n            keyNo\r\n            ,select: false\r\n        }\r\n\r\n        try {\r\n            await StateActions.getCommuteSearchStateList(search, token);\r\n            await PaginationActions.getSearchPage(search, token);\r\n            await ListActions.getTableList(search, pageNumber, search.select, token, language);\r\n        } catch(e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        const {auth} = this.props;\r\n        let keyNo = null;\r\n        if(sessionStorage.getItem(\"listkeyNo\") !== \"define\") {\r\n            keyNo = sessionStorage.getItem(\"listkeyNo\");\r\n            sessionStorage.removeItem(\"listkeyNo\");\r\n            sessionStorage.setItem(\"listkeyNo\", \"define\");\r\n        }\r\n        // USER가 알림(출퇴근 수정) 클릭했을 경우\r\n        if(keyNo !== null && auth === 'ROLE_USER') {\r\n            this.getAlarmSearchList(keyNo);\r\n        } else {\r\n            this.getFullList();\r\n        }\r\n    }\r\n\r\n    // (list, calendar)리스트 클릭시 updateRead액션 발생\r\n    // MongoDB의 key_no와 startNo가 일치하면 read true로 update\r\n    updateRead = (no) => {\r\n        const { token, auth, ListActions } = this.props;\r\n        const recordType = \"출퇴근\"\r\n        ListActions.updateRead(no, auth, recordType, token);\r\n    }\r\n\r\n    handleChangeInput = ({name, value}) => {\r\n        const {ListActions, auth} = this.props;\r\n        // 권한이 유저일 경우에 출퇴근 칼럼 클릭시 read update\r\n        if(name === 'startNo' && auth === 'ROLE_USER') {\r\n            this.updateRead(value);\r\n        }\r\n        ListActions.changeInput({name, value});\r\n    }\r\n\r\n    render() {\r\n        const {tables, loading, changeView, language} = this.props;\r\n        const {handleChangeInput} = this;\r\n\r\n        if (changeView !== 'table') return null;\r\n        if (loading && tables <= 0) return null;\r\n\r\n        return (\r\n            <div>\r\n                <TableList language={language} tables={tables} handleChangeInput={handleChangeInput}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        tables: state.list.get('tables'),\r\n        changeView: state.list.get('changeView'),\r\n        startNo: state.list.get('startNo'),\r\n        endNo: state.list.get('endNo'),\r\n        select: state.list.get('select'),\r\n        userNo: state.list.get('userNo'),\r\n        loading: state.pender.pending['list/FULL_TABLE_LIST'],\r\n        activePage: state.pagination.get('activePage'),\r\n        token: state.login.token,\r\n        auth: state.login.auth,\r\n        loginUserNo: state.login.no,\r\n        language: state.language.language\r\n    }),\r\n    (dispatch) => ({\r\n        ListActions: bindActionCreators(listActions, dispatch),\r\n        GetCalList: bindActionCreators(getCalList, dispatch),\r\n        StateActions: bindActionCreators(stateActions, dispatch),\r\n        PaginationActions: bindActionCreators(paginationList, dispatch),\r\n    })\r\n)(LIstTableContainer);"]},"metadata":{},"sourceType":"module"}