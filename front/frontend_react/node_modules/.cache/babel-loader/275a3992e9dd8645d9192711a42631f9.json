{"ast":null,"code":"var _jsxFileName = \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\src\\\\components\\\\chat\\\\chat.js\";\nimport React, { Component } from 'react'; // Styling\n\nimport './ChatMessageBox.css'; // Default user image\n\nimport userImage from '../userImage.png'; // import backToTop from './backToTop.png';\n\nvar stompClient = null;\n\nclass chat extends Component {\n  constructor(props) {\n    super(props);\n\n    this.connect = userName => {\n      if (userName) {\n        const Stomp = require('stompjs');\n\n        var SockJS = require('sockjs-client');\n\n        SockJS = new SockJS('/ws');\n        stompClient = Stomp.over(SockJS);\n        stompClient.connect({}, this.onConnected, this.onError);\n        this.setState({\n          username: userName\n        });\n      }\n    };\n\n    this.onConnected = () => {\n      this.setState({\n        channelConnected: true\n      }); // Subscribing to the public topic\n\n      stompClient.subscribe('/topic/pubic', this.onMessageReceived); // Registering user to server as a public chat user\n\n      stompClient.send(\"/app/addUser\", {}, JSON.stringify({\n        sender: this.state.username,\n        type: 'JOIN'\n      }));\n    };\n\n    this.sendMessage = (type, value) => {\n      if (stompClient) {\n        var chatMessage = {\n          sender: this.state.username,\n          content: type === 'TYPING' ? value : value,\n          type: type\n        }; // send public message\n\n        stompClient.send(\"/app/sendMessage\", {}, JSON.stringify(chatMessage));\n      }\n    };\n\n    this.onMessageReceived = payload => {\n      var message = JSON.parse(payload.body);\n\n      if (message.type === 'JOIN') {\n        this.state.roomNotification.push({\n          'sender': message.sender + \" ~ joined\",\n          'status': 'online',\n          'dateTime': message.dateTime\n        });\n        this.setState({\n          roomNotification: this.state.roomNotification,\n          bellRing: true\n        });\n      } else if (message.type === 'LEAVE') {\n        this.state.roomNotification.map((notification, i) => {\n          if (notification.sender === message.sender + \" ~ joined\") {\n            notification.status = \"offline\";\n            notification.sender = message.sender + \" ~ left\";\n            notification.dateTime = message.dateTime;\n          }\n        });\n        this.setState({\n          roomNotification: this.state.roomNotification,\n          bellRing: true\n        });\n      } else if (message.type === 'TYPING') {\n        this.state.roomNotification.map((notification, i) => {\n          if (notification.sender === message.sender + \" ~ joined\") {\n            if (message.content) notification.status = \"typing...\";else notification.status = \"online\";\n          }\n        });\n        this.setState({\n          roomNotification: this.state.roomNotification\n        });\n      } else if (message.type === 'CHAT') {\n        this.state.roomNotification.map((notification, i) => {\n          if (notification.sender === message.sender + \" ~ joined\") {\n            notification.status = \"online\";\n          }\n        });\n        this.state.broadcastMessage.push({\n          message: message.content,\n          sender: message.sender,\n          dateTime: message.dateTime\n        });\n        this.setState({\n          broadcastMessage: this.state.broadcastMessage\n        });\n      } else {// do nothing...\n      }\n    };\n\n    this.onError = error => {\n      this.setState({\n        error: 'Could not connect you to the Chat Room Server. Please refresh this page and try again!'\n      });\n    };\n\n    this.fetchHostory = () => {\n      alert('History Not Available!\\nIt is Not Yet Implemented!');\n    };\n\n    this.scrollToBottom = () => {\n      var object = this.refs.messageBox;\n      if (object) object.scrollTop = object.scrollHeight;\n    };\n\n    this.state = {\n      username: '',\n      channelConnected: false,\n      chatMessage: '',\n      roomNotification: [],\n      broadcastMessage: [],\n      error: '',\n      bottom: false,\n      curTime: '',\n      openNotifications: false,\n      bellRing: false\n    };\n  }\n\n  // getRandomColor = () => {\n  //   var letters = '0123456789ABCDEF';\n  //   var color = '#';\n  //   for (var i = 0; i < 6; i++) {\n  //     color += letters[Math.floor(Math.random() * 16)];\n  //   }\n  //   return color;\n  // }\n  componentDidUpdate() {\n    if (this.state.error) {\n      throw new Error('Unable to connect to chat room server.');\n    } else {\n      this.scrollToBottom();\n    }\n  }\n\n  componentDidMount() {\n    this.setState({\n      curTime: new Date().toLocaleString()\n    });\n    this.timerID = setInterval(() => this.state.bellRing ? this.setState({\n      bellRing: false\n    }) : \"\", 10000);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 7\n      }\n    }, \"}\");\n  }\n\n}\n\nexport default chat;","map":{"version":3,"sources":["F:/JAVA_WORKSPACE/frontend_react-20191018T023535Z-001/frontend_react/src/components/chat/chat.js"],"names":["React","Component","userImage","stompClient","chat","constructor","props","connect","userName","Stomp","require","SockJS","over","onConnected","onError","setState","username","channelConnected","subscribe","onMessageReceived","send","JSON","stringify","sender","state","type","sendMessage","value","chatMessage","content","payload","message","parse","body","roomNotification","push","dateTime","bellRing","map","notification","i","status","broadcastMessage","error","fetchHostory","alert","scrollToBottom","object","refs","messageBox","scrollTop","scrollHeight","bottom","curTime","openNotifications","componentDidUpdate","Error","componentDidMount","Date","toLocaleString","timerID","setInterval","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\n// Styling\r\nimport './ChatMessageBox.css';\r\n// Default user image\r\nimport userImage from '../userImage.png';\r\n// import backToTop from './backToTop.png';\r\n\r\nvar stompClient = null;\r\nclass chat extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state =\r\n      {\r\n        username: '',\r\n        channelConnected: false,\r\n        chatMessage: '',\r\n        roomNotification: [],\r\n        broadcastMessage: [],\r\n        error: '',\r\n        bottom: false,\r\n        curTime: '',\r\n        openNotifications: false,\r\n        bellRing: false\r\n      };\r\n  }\r\n\r\n  connect = (userName) => {\r\n\r\n    if (userName) {\r\n\r\n      const Stomp = require('stompjs')\r\n\r\n      var SockJS = require('sockjs-client')\r\n\r\n      SockJS = new SockJS('/ws')\r\n\r\n      stompClient = Stomp.over(SockJS);\r\n\r\n      stompClient.connect({}, this.onConnected, this.onError);\r\n\r\n      this.setState({\r\n        username: userName,\r\n      })\r\n    }\r\n  }\r\n\r\n  onConnected = () => {\r\n\r\n    this.setState({\r\n      channelConnected: true\r\n    })\r\n\r\n    // Subscribing to the public topic\r\n    stompClient.subscribe('/topic/pubic', this.onMessageReceived);\r\n\r\n    // Registering user to server as a public chat user\r\n    stompClient.send(\"/app/addUser\", {}, JSON.stringify({ sender: this.state.username, type: 'JOIN' }))\r\n\r\n  }\r\n\r\n  sendMessage = (type, value) => {\r\n\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        sender: this.state.username,\r\n        content: type === 'TYPING' ? value : value,\r\n        type: type\r\n\r\n      };\r\n      // send public message\r\n      stompClient.send(\"/app/sendMessage\", {}, JSON.stringify(chatMessage));\r\n    }\r\n  }\r\n\r\n  onMessageReceived = (payload) => {\r\n\r\n    var message = JSON.parse(payload.body);\r\n\r\n    if (message.type === 'JOIN') {\r\n\r\n      this.state.roomNotification.push({ 'sender': message.sender + \" ~ joined\", 'status': 'online', 'dateTime': message.dateTime })\r\n      this.setState({\r\n        roomNotification: this.state.roomNotification,\r\n        bellRing: true\r\n      })\r\n\r\n    }\r\n    else if (message.type === 'LEAVE') {\r\n      this.state.roomNotification.map((notification, i) => {\r\n        if (notification.sender === message.sender + \" ~ joined\") {\r\n          notification.status = \"offline\";\r\n          notification.sender = message.sender + \" ~ left\";\r\n          notification.dateTime = message.dateTime;\r\n        }\r\n      })\r\n      this.setState({\r\n        roomNotification: this.state.roomNotification,\r\n        bellRing: true\r\n      })\r\n    }\r\n    else if (message.type === 'TYPING') {\r\n\r\n      this.state.roomNotification.map((notification, i) => {\r\n        if (notification.sender === message.sender + \" ~ joined\") {\r\n          if (message.content)\r\n            notification.status = \"typing...\";\r\n          else\r\n            notification.status = \"online\";\r\n        }\r\n\r\n      })\r\n      this.setState({\r\n        roomNotification: this.state.roomNotification\r\n      })\r\n    }\r\n    else if (message.type === 'CHAT') {\r\n\r\n      this.state.roomNotification.map((notification, i) => {\r\n        if (notification.sender === message.sender + \" ~ joined\") {\r\n          notification.status = \"online\";\r\n        }\r\n      })\r\n      this.state.broadcastMessage.push({\r\n        message: message.content,\r\n        sender: message.sender,\r\n        dateTime: message.dateTime\r\n      })\r\n      this.setState({\r\n        broadcastMessage: this.state.broadcastMessage,\r\n\r\n      })\r\n    }\r\n    else {\r\n      // do nothing...\r\n    }\r\n  }\r\n\r\n  onError = (error) => {\r\n    this.setState({\r\n      error: 'Could not connect you to the Chat Room Server. Please refresh this page and try again!'\r\n    })\r\n  }\r\n\r\n  fetchHostory = () => {\r\n    alert('History Not Available!\\nIt is Not Yet Implemented!');\r\n  }\r\n\r\n  scrollToBottom = () => {\r\n    var object = this.refs.messageBox;\r\n    if (object)\r\n      object.scrollTop = object.scrollHeight;\r\n  }\r\n\r\n  // getRandomColor = () => {\r\n  //   var letters = '0123456789ABCDEF';\r\n  //   var color = '#';\r\n  //   for (var i = 0; i < 6; i++) {\r\n  //     color += letters[Math.floor(Math.random() * 16)];\r\n  //   }\r\n  //   return color;\r\n  // }\r\n\r\n  componentDidUpdate() {\r\n    if (this.state.error) {\r\n      throw new Error('Unable to connect to chat room server.');\r\n    }\r\n    else {\r\n      this.scrollToBottom();\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      curTime: new Date().toLocaleString()\r\n    })\r\n\r\n    this.timerID = setInterval(\r\n      () => this.state.bellRing ? this.setState({\r\n        bellRing: false\r\n      }) : \"\",\r\n      10000\r\n    );\r\n\r\n  }\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        \r\n        \r\n        }\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default chat;"]},"metadata":{},"sourceType":"module"}