{"ast":null,"code":"import { compose, withState, withHandlers, lifecycle } from 'recompose';\nimport { connect } from 'react-redux';\nimport HeaderView from './HeaderView';\nimport { getNotice, setNoticeStore } from \"./Notice/NoticeListState\";\nimport { signOut } from '../../pages/login/LoginState';\nimport { toggleSidebar } from '../Layout/LayoutState';\nimport { changeLanguage } from 'store/modules/language';\nimport { inittime } from 'store/modules/time';\nimport { click } from 'store/modules/alarm';\nexport default compose(connect(state => ({\n  isSidebarOpened: state.layout.isSidebarOpened,\n  no: state.login.no,\n  auth: state.login.auth,\n  token: state.login.token,\n  name: state.login.name,\n  id: state.login.id,\n  tables: state.notice.tables,\n  isInit: state.notice.isInit,\n  isLogouting: state.login.isLogouting,\n  isLogging: state.login.isLogging,\n  language: state.language.language,\n  isClick: state.alarm.get(\"isClick\"),\n  commuteView: state.list.get('changeView'),\n  workAttitudeView: state.list.get('changeView'),\n  preGoTo: state.commute.get(\"preGoTo\"),\n  preGoOff: state.commute.get(\"preGoOff\"),\n  cnt: state.commute.get(\"cnt\"),\n  totalWorkTime: state.time.get(\"totalWorkTime\"),\n  start: state.time.get(\"start\"),\n  time: state.time.get(\"time\"),\n  end: state.time.get(\"end\"),\n  starttime: state.time.get(\"starttime\"),\n  endtime: state.time.get(\"endtime\")\n}), {\n  signOut,\n  click,\n  inittime,\n  toggleSidebar,\n  getNotice,\n  setNoticeStore,\n  changeLanguage\n}), withState('mailMenu', 'setMailMenu', null), withState('isMailsUnread', 'setIsMailsUnread', true), withState('notificationsMenu', 'setNotificationsMenu', null), withState('isNotificationsUnread', 'setIsNotificationsUnread', true), withState('profileMenu', 'setProfileMenu', null), withState('isSearchOpen', 'setSearchOpen', false), withHandlers({\n  // 다국어 열기\n  openMailMenu: props => event => {\n    props.setMailMenu(event.currentTarget);\n    props.setIsMailsUnread(false);\n  },\n  // 다국어 닫기\n  closeMailMenu: props => () => {\n    props.setMailMenu(null);\n  },\n  // 언어 변경 sessionStorage로 언어 변경시에도 유지\n  onChangeLanguage: props => message => {\n    if (sessionStorage.getItem(\"language\")) {\n      sessionStorage.removeItem(\"language\");\n\n      if (sessionStorage.getItem(\"language\") === null) {\n        sessionStorage.setItem(\"language\", message);\n      }\n    }\n\n    props.changeLanguage(message);\n    props.setMailMenu(null);\n  },\n  // 알림 열기 - 알림 Icon 클릭시\n  openNotificationsMenu: props => event => {\n    props.setNotificationsMenu(event.currentTarget);\n    props.setIsNotificationsUnread(false);\n  },\n  // 알림 닫기\n  closeNotificationsMenu: props => () => {\n    props.setNotificationsMenu(null);\n  },\n  toggleSearch: props => () => {\n    props.setSearchOpen(!props.isSearchOpen);\n  },\n  openProfileMenu: props => event => {\n    props.setProfileMenu(event.currentTarget);\n  },\n  closeProfileMenu: props => () => {\n    props.setProfileMenu(null);\n  },\n  logouthandle: props => () => {\n    props.setNoticeStore();\n    props.signOut(props.token);\n    props.inittime();\n  }\n}), lifecycle({\n  componentDidMount() {\n    // KJS: requet가 많아서 알림 주석 처리 했습니다.\n    const _this$props = this.props,\n          getNotice = _this$props.getNotice,\n          auth = _this$props.auth,\n          no = _this$props.no,\n          token = _this$props.token,\n          isLogging = _this$props.isLogging;\n\n    if (auth === 'ROLE_ADMIN' && isLogging) {\n      getNotice(auth, no, token);\n      const repeat = setInterval(function () {\n        if (sessionStorage.getItem(\"id_token\")) {\n          getNotice(auth, no, token);\n        }\n\n        if (!sessionStorage.getItem(\"id_token\")) {\n          clearInterval(repeat);\n        }\n      }, 2000);\n    }\n\n    if (auth === 'ROLE_USER' && isLogging) {\n      getNotice(auth, no, token);\n      const repeat = setInterval(function () {\n        if (sessionStorage.getItem(\"id_token\")) {\n          getNotice(auth, no, token);\n        }\n\n        if (!sessionStorage.getItem(\"id_token\")) {\n          clearInterval(repeat);\n        }\n      }, 2000);\n    }\n  }\n\n}))(HeaderView);","map":{"version":3,"sources":["F:/JAVA_WORKSPACE/frontend_react-20191018T023535Z-001/frontend_react/src/components/Header/HeaderContainer.js"],"names":["compose","withState","withHandlers","lifecycle","connect","HeaderView","getNotice","setNoticeStore","signOut","toggleSidebar","changeLanguage","inittime","click","state","isSidebarOpened","layout","no","login","auth","token","name","id","tables","notice","isInit","isLogouting","isLogging","language","isClick","alarm","get","commuteView","list","workAttitudeView","preGoTo","commute","preGoOff","cnt","totalWorkTime","time","start","end","starttime","endtime","openMailMenu","props","event","setMailMenu","currentTarget","setIsMailsUnread","closeMailMenu","onChangeLanguage","message","sessionStorage","getItem","removeItem","setItem","openNotificationsMenu","setNotificationsMenu","setIsNotificationsUnread","closeNotificationsMenu","toggleSearch","setSearchOpen","isSearchOpen","openProfileMenu","setProfileMenu","closeProfileMenu","logouthandle","componentDidMount","repeat","setInterval","clearInterval"],"mappings":"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","sourcesContent":["import { compose, withState, withHandlers, lifecycle } from 'recompose';\r\nimport { connect } from 'react-redux';\r\n\r\nimport HeaderView from './HeaderView';\r\nimport { getNotice, setNoticeStore } from \"./Notice/NoticeListState\";\r\nimport { signOut } from '../../pages/login/LoginState';\r\nimport { toggleSidebar } from '../Layout/LayoutState';\r\nimport { changeLanguage } from 'store/modules/language'\r\nimport { inittime } from 'store/modules/time';\r\nimport { click } from 'store/modules/alarm';\r\n\r\nexport default compose(\r\n  connect(\r\n    state => ({\r\n      isSidebarOpened: state.layout.isSidebarOpened,\r\n      no: state.login.no,\r\n      auth: state.login.auth,\r\n      token: state.login.token,\r\n      name: state.login.name,\r\n      id: state.login.id,\r\n      tables: state.notice.tables,\r\n      isInit: state.notice.isInit,\r\n      isLogouting: state.login.isLogouting,\r\n      isLogging: state.login.isLogging,\r\n      language: state.language.language,\r\n      isClick: state.alarm.get(\"isClick\"),\r\n      commuteView: state.list.get('changeView'),\r\n      workAttitudeView: state.list.get('changeView'),\r\n\r\n      preGoTo: state.commute.get(\"preGoTo\"),\r\n      preGoOff: state.commute.get(\"preGoOff\"),\r\n      cnt: state.commute.get(\"cnt\"),\r\n\r\n      totalWorkTime : state.time.get(\"totalWorkTime\"),\r\n      start : state.time.get(\"start\"),\r\n      time: state.time.get(\"time\"),\r\n      end : state.time.get(\"end\"),\r\n      starttime : state.time.get(\"starttime\"),\r\n      endtime:state.time.get(\"endtime\")\r\n    }),\r\n    { signOut, click, inittime, toggleSidebar, getNotice, setNoticeStore, changeLanguage }),\r\n  withState('mailMenu', 'setMailMenu', null),\r\n  withState('isMailsUnread', 'setIsMailsUnread', true),\r\n  withState('notificationsMenu', 'setNotificationsMenu', null),\r\n  withState('isNotificationsUnread', 'setIsNotificationsUnread', true),\r\n  withState('profileMenu', 'setProfileMenu', null),\r\n  withState('isSearchOpen', 'setSearchOpen', false),\r\n  withHandlers({\r\n    // 다국어 열기\r\n    openMailMenu: props => event => {\r\n      props.setMailMenu(event.currentTarget);\r\n      props.setIsMailsUnread(false);\r\n    },\r\n    // 다국어 닫기\r\n    closeMailMenu: props => () => {\r\n      props.setMailMenu(null);\r\n    },\r\n    // 언어 변경 sessionStorage로 언어 변경시에도 유지\r\n    onChangeLanguage: props => (message) => {\r\n      if(sessionStorage.getItem(\"language\")) {\r\n        sessionStorage.removeItem(\"language\");\r\n        if(sessionStorage.getItem(\"language\") === null) {\r\n          sessionStorage.setItem(\"language\", message);\r\n        }\r\n      }\r\n      props.changeLanguage(message);\r\n      props.setMailMenu(null);\r\n    },\r\n    // 알림 열기 - 알림 Icon 클릭시\r\n    openNotificationsMenu: props => event => {\r\n      props.setNotificationsMenu(event.currentTarget);\r\n      props.setIsNotificationsUnread(false);\r\n    },\r\n    // 알림 닫기\r\n    closeNotificationsMenu: props => () => {\r\n      props.setNotificationsMenu(null);  \r\n    },\r\n    toggleSearch: props => () => {\r\n      props.setSearchOpen(!props.isSearchOpen);\r\n    },\r\n    openProfileMenu: props => event => {\r\n      props.setProfileMenu(event.currentTarget);\r\n    },\r\n    closeProfileMenu: props => () => {\r\n      props.setProfileMenu(null);\r\n    },\r\n    logouthandle: props => () => {\r\n      props.setNoticeStore();\r\n      props.signOut(props.token);\r\n      props.inittime();\r\n    }\r\n  }),\r\n  lifecycle({\r\n    componentDidMount() {\r\n      // KJS: requet가 많아서 알림 주석 처리 했습니다.\r\n\r\n      const { getNotice, auth, no, token, isLogging} = this.props;\r\n\r\n       if(auth === 'ROLE_ADMIN' && isLogging) {\r\n         getNotice(auth, no, token);\r\n    \r\n        const repeat = setInterval(function() {\r\n          if(sessionStorage.getItem(\"id_token\")) {\r\n            getNotice(auth, no, token);\r\n          }\r\n          if(!sessionStorage.getItem(\"id_token\")) {\r\n            clearInterval(repeat);\r\n          }\r\n        }, 2000);\r\n       }\r\n    \r\n      if(auth === 'ROLE_USER' && isLogging) {\r\n         getNotice(auth, no, token);\r\n    \r\n        const repeat = setInterval(function() {\r\n          if(sessionStorage.getItem(\"id_token\")) {\r\n            getNotice(auth, no, token);\r\n          }\r\n          if(!sessionStorage.getItem(\"id_token\")) {\r\n            clearInterval(repeat);\r\n          }\r\n        }, 2000);\r\n       }\r\n    }\r\n  })\r\n)(HeaderView);"]},"metadata":{},"sourceType":"module"}