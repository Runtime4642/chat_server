{"ast":null,"code":"import _objectSpread from \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport Axios from 'axios';\nimport RSA from 'node-rsa';\nexport const initialState = {\n  isLoading: false,\n  // 로그인 요청\n  isLogging: false,\n  // 현재 로그인 상태\n  isLogouting: false,\n  // 로그아웃 요청\n  isSignout: false,\n  // 로그아웃 상태 \n  isAuthenticated: !!sessionStorage.getItem(\"id_token\"),\n  // login 및 getUser 유무\n  token: false,\n  // token\n  name: false,\n  // 사용자 name\n  id: false,\n  // 사용자 id\n  no: false,\n  // 사용자 no\n  auth: false,\n  // 권한\n  error: null,\n  // 에러 발생 유무\n  errorMessage: null // 에러 응답 코드\n\n};\nexport const START_LOGIN = \"Login/START_LOGIN\";\nexport const LOGIN_SUCCESS = \"Login/LOGIN_SUCCESS\";\nexport const LOGIN_FAILURE = \"Login/LOGIN_FAILURE\";\nexport const START_GET_USER = \"Get/START_GET_USER\";\nexport const GET_USER_SUCCESS = \"Get/GET_USER_SUCCESS\";\nexport const GET_USER_FAILURE = \"Get/GET_USER_FAILURE\";\nexport const RESET_ERROR = \"Login/RESET_ERROR\";\nexport const LOGIN_USER = \"Login/LOGIN_USER\";\nexport const START_LOGOUT = \"Logout/START_LOGOUT\";\nexport const SIGN_OUT_SUCCESS = \"Logout/SIGN_OUT_SUCCESS\";\nexport const startLogin = () => ({\n  type: START_LOGIN\n});\nexport const loginSuccess = token => ({\n  type: LOGIN_SUCCESS,\n  payload: {\n    token: token\n  }\n});\nexport const loginFailure = message => ({\n  type: LOGIN_FAILURE,\n  payload: {\n    message: message\n  }\n});\nexport const resetError = () => ({\n  type: RESET_ERROR\n});\nexport const startGetUser = () => ({\n  type: START_GET_USER\n});\nexport const getUserSuccess = (response, token) => ({\n  type: GET_USER_SUCCESS,\n  payload: {\n    response: response,\n    token: token\n  }\n});\nexport const getUserFailure = () => ({\n  type: GET_USER_FAILURE\n});\nexport const startLogout = () => ({\n  type: START_LOGOUT\n});\nexport const signOutSuccess = () => ({\n  type: SIGN_OUT_SUCCESS\n});\nexport const loginUser = (username, password) => {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var key, publicKey, encrypted;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            // 로그인이 시작됨을 알리는 action 객체를 reducer에게 전달\n            dispatch(startLogin());\n            key = '-----BEGIN PUBLIC KEY-----\\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDVdmwYWqL0Dy7BGoYSHBxuBcgj7btuTRGrWduSwKasiPMhO4tfAttfXP1ajI4cSN0PKg3T0obIOLvU4knFjhdXlvcQifjoQHziiW1QTyWr96kRRH0QW2G35cMcqvw9eFmTzXoXEc/1f2sAJ6eDcrq9YrLwbG8QQT3pNddgT6dkFQIDAQAB\\n-----END PUBLIC KEY-----';\n            publicKey = new RSA(key);\n            encrypted = publicKey.encrypt(password, 'base64');\n            password = encrypted; // backend와 통신\n\n            _context.next = 7;\n            return Axios.post('http://218.39.221.104:8080/smartchecker/user/auth', {\n              username,\n              password\n            }).then(response => {\n              // 로그인 성공시 성공을 알리는 action 객체를 reducer에게 전달\n              if (response.data.result === 'fail') {\n                dispatch(loginFailure(response.data.message));\n              } else if (response.data.token) {\n                sessionStorage.setItem(\"id_token\", response.data.token);\n                sessionStorage.setItem(\"listkeyNo\", \"define\");\n                sessionStorage.setItem(\"statekeyNo\", \"define\");\n                sessionStorage.setItem(\"pagekeyNo\", \"define\");\n                dispatch(loginSuccess(response.data.token));\n              } else {\n                //console.log(response);\n                dispatch(loginFailure(response.data.message));\n              }\n            }).catch(error => {\n              // 로그인 실패시 실패를 알리는 action 객체를 reducer에게 전달\n              dispatch(loginFailure(error.message));\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport const getUser = token => {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            dispatch(startGetUser()); // 다국어(언어) server에 넘길시 'Accept-Language'에 언어 설정\n\n            _context2.next = 3;\n            return Axios.get('http://218.39.221.104:8080/smartchecker/user', {\n              headers: {\n                'Authorization': 'Bearer ' + token\n              }\n            }).then(response => {\n              console.log(response);\n              dispatch(getUserSuccess(response, token));\n            }).catch(error => {\n              dispatch(getUserFailure());\n            });\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nexport const signOut = token => {\n  return /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch) {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            dispatch(startLogout());\n            _context3.next = 3;\n            return Axios.post('http://218.39.221.104:8080/smartchecker/user/logout', {\n              token\n            }, {\n              headers: {\n                'Authorization': 'Bearer ' + token\n              }\n            }).then(response => {\n              // Storage 데이터들 전부 삭제\n              localStorage.clear(); // id_token 삭제\n\n              sessionStorage.removeItem(\"id_token\"); // key_No 삭제\n\n              sessionStorage.removeItem(\"listkeyNo\");\n              sessionStorage.removeItem(\"statekeyNo\");\n              sessionStorage.removeItem(\"pagekeyNo\"); // alarm 개수 삭제\n\n              sessionStorage.removeItem(\"alarmnum\"); // token이 sessionStorage에서 완전히 삭제되었을 경우 로그아웃 액션 실행\n\n              if (!sessionStorage.getItem(\"id_token\")) {\n                dispatch(signOutSuccess());\n              }\n            }).catch(error => {//console.log(\"로그아웃 에러 응답\");\n              //console.log(error);\n            });\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};\nexport default function LoginReducer(state = initialState, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case START_LOGIN:\n      return _objectSpread({}, state, {\n        isLoading: true\n      });\n\n    case LOGIN_SUCCESS:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        isAuthenticated: true,\n        token: payload.token,\n        error: null\n      });\n\n    case LOGIN_FAILURE:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        error: true,\n        errorMessage: payload.message\n      });\n\n    case START_GET_USER:\n      return _objectSpread({}, state, {\n        isLoading: true\n      });\n\n    case GET_USER_SUCCESS:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        isLogging: true,\n        token: payload.token,\n        name: payload.response.data.name,\n        no: payload.response.data.no,\n        auth: payload.response.data.authorities[0].authority,\n        id: payload.response.data.username,\n        error: null\n      });\n\n    case GET_USER_FAILURE:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        error: true\n      });\n\n    case RESET_ERROR:\n      return {\n        error: false\n      };\n\n    case START_LOGOUT:\n      return _objectSpread({}, state, {\n        isLogouting: true\n      });\n\n    case SIGN_OUT_SUCCESS:\n      return {\n        isLoading: false,\n        isLogging: false,\n        isLogouting: false,\n        isSignout: true,\n        isAuthenticated: false,\n        token: false,\n        name: false,\n        id: false,\n        no: false,\n        auth: false,\n        error: null\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["F:/JAVA_WORKSPACE/frontend_react-20191018T023535Z-001/frontend_react/src/pages/login/LoginState.js"],"names":["Axios","RSA","initialState","isLoading","isLogging","isLogouting","isSignout","isAuthenticated","sessionStorage","getItem","token","name","id","no","auth","error","errorMessage","START_LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","START_GET_USER","GET_USER_SUCCESS","GET_USER_FAILURE","RESET_ERROR","LOGIN_USER","START_LOGOUT","SIGN_OUT_SUCCESS","startLogin","type","loginSuccess","payload","loginFailure","message","resetError","startGetUser","getUserSuccess","response","getUserFailure","startLogout","signOutSuccess","loginUser","username","password","dispatch","key","publicKey","encrypted","encrypt","post","then","data","result","setItem","catch","getUser","get","headers","console","log","signOut","localStorage","clear","removeItem","LoginReducer","state","authorities","authority"],"mappings":"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","sourcesContent":["import Axios from 'axios';\r\nimport RSA from 'node-rsa';\r\nexport const initialState = {\r\n  isLoading: false,         // 로그인 요청\r\n  isLogging: false,         // 현재 로그인 상태\r\n  isLogouting: false,       // 로그아웃 요청\r\n  isSignout: false,         // 로그아웃 상태 \r\n  isAuthenticated: !!sessionStorage.getItem(\"id_token\"),   // login 및 getUser 유무\r\n  token: false,             // token\r\n  name: false,              // 사용자 name\r\n  id: false,                // 사용자 id\r\n  no: false,                // 사용자 no\r\n  auth: false,              // 권한\r\n  error: null,              // 에러 발생 유무\r\n  errorMessage: null        // 에러 응답 코드\r\n};\r\n\r\nexport const START_LOGIN = \"Login/START_LOGIN\";\r\nexport const LOGIN_SUCCESS = \"Login/LOGIN_SUCCESS\";\r\nexport const LOGIN_FAILURE = \"Login/LOGIN_FAILURE\";\r\n\r\nexport const START_GET_USER = \"Get/START_GET_USER\";\r\nexport const GET_USER_SUCCESS = \"Get/GET_USER_SUCCESS\";\r\nexport const GET_USER_FAILURE = \"Get/GET_USER_FAILURE\";\r\n\r\nexport const RESET_ERROR = \"Login/RESET_ERROR\";\r\nexport const LOGIN_USER = \"Login/LOGIN_USER\";\r\n\r\nexport const START_LOGOUT = \"Logout/START_LOGOUT\";\r\nexport const SIGN_OUT_SUCCESS = \"Logout/SIGN_OUT_SUCCESS\";\r\n\r\nexport const startLogin = () => ({\r\n  type: START_LOGIN\r\n});\r\n\r\nexport const loginSuccess = (token) => ({\r\n  type: LOGIN_SUCCESS,\r\n  payload : {\r\n    token : token\r\n  }\r\n});\r\n\r\nexport const loginFailure = (message) => ({\r\n  type: LOGIN_FAILURE,\r\n  payload : {\r\n    message : message\r\n  }\r\n});\r\n\r\nexport const resetError = () => ({\r\n  type: RESET_ERROR\r\n});\r\n\r\nexport const startGetUser = () => ({\r\n  type: START_GET_USER\r\n});\r\n\r\nexport const getUserSuccess = (response, token) => ({\r\n  type: GET_USER_SUCCESS,\r\n  payload : {\r\n    response : response,\r\n    token : token\r\n  }\r\n});\r\n\r\nexport const getUserFailure = () => ({\r\n  type: GET_USER_FAILURE\r\n})\r\n\r\nexport const startLogout = () => ({\r\n  type: START_LOGOUT\r\n})\r\n\r\nexport const signOutSuccess = () => ({\r\n  type: SIGN_OUT_SUCCESS\r\n});\r\n\r\nexport const loginUser = (username, password) =>{\r\n  return async (dispatch) => {\r\n      // 로그인이 시작됨을 알리는 action 객체를 reducer에게 전달\r\n      dispatch(startLogin());\r\n\r\n      let key='-----BEGIN PUBLIC KEY-----\\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDVdmwYWqL0Dy7BGoYSHBxuBcgj7btuTRGrWduSwKasiPMhO4tfAttfXP1ajI4cSN0PKg3T0obIOLvU4knFjhdXlvcQifjoQHziiW1QTyWr96kRRH0QW2G35cMcqvw9eFmTzXoXEc/1f2sAJ6eDcrq9YrLwbG8QQT3pNddgT6dkFQIDAQAB\\n-----END PUBLIC KEY-----'\r\n      const publicKey = new RSA(key);\r\n      const encrypted = publicKey.encrypt(password, 'base64');\r\n      password=encrypted;\r\n      // backend와 통신\r\n      await Axios.post('http://218.39.221.104:8080/smartchecker/user/auth', \r\n      { username, password })\r\n      .then((response) => {\r\n          // 로그인 성공시 성공을 알리는 action 객체를 reducer에게 전달\r\n          if(response.data.result === 'fail') {\r\n              dispatch(loginFailure(response.data.message));\r\n          } \r\n          else if (response.data.token){\r\n              sessionStorage.setItem(\"id_token\", response.data.token);\r\n              sessionStorage.setItem(\"listkeyNo\", \"define\");\r\n              sessionStorage.setItem(\"statekeyNo\", \"define\");\r\n              sessionStorage.setItem(\"pagekeyNo\", \"define\");\r\n              dispatch(loginSuccess(response.data.token));\r\n          } \r\n          else {\r\n              //console.log(response);\r\n              dispatch(loginFailure(response.data.message));\r\n          }\r\n      }).catch((error) => {\r\n          // 로그인 실패시 실패를 알리는 action 객체를 reducer에게 전달\r\n          dispatch(loginFailure(error.message));\r\n      });\r\n  };\r\n}\r\n\r\nexport const getUser = (token) => {\r\n  return async (dispatch) => {\r\n    dispatch(startGetUser());\r\n    \r\n    // 다국어(언어) server에 넘길시 'Accept-Language'에 언어 설정\r\n    await Axios.get('http://218.39.221.104:8080/smartchecker/user', {\r\n      headers : {\r\n        'Authorization' : 'Bearer ' + token\r\n      }\r\n    })\r\n    .then((response) => {\r\n      console.log(response);\r\n      dispatch(getUserSuccess(response, token));\r\n    })\r\n    .catch((error) => {\r\n      dispatch(getUserFailure());\r\n    })\r\n  }\r\n}\r\n\r\nexport const signOut = (token) => {\r\n  return async(dispatch) => {\r\n    dispatch(startLogout());\r\n    await Axios.post('http://218.39.221.104:8080/smartchecker/user/logout', { token }, {\r\n      headers : {\r\n        'Authorization' : 'Bearer ' + token\r\n      }\r\n    })\r\n    .then((response) => {\r\n      // Storage 데이터들 전부 삭제\r\n      localStorage.clear();\r\n      // id_token 삭제\r\n      sessionStorage.removeItem(\"id_token\");\r\n      // key_No 삭제\r\n      sessionStorage.removeItem(\"listkeyNo\");\r\n      sessionStorage.removeItem(\"statekeyNo\");\r\n      sessionStorage.removeItem(\"pagekeyNo\");\r\n      // alarm 개수 삭제\r\n      sessionStorage.removeItem(\"alarmnum\");\r\n  \r\n      // token이 sessionStorage에서 완전히 삭제되었을 경우 로그아웃 액션 실행\r\n      if(!sessionStorage.getItem(\"id_token\")) {\r\n          dispatch(signOutSuccess());\r\n        }\r\n    })\r\n    .catch((error) => {\r\n      //console.log(\"로그아웃 에러 응답\");\r\n      //console.log(error);\r\n    })\r\n  }\r\n};\r\n\r\nexport default function LoginReducer(state = initialState, { type, payload }) {\r\n  switch (type) {\r\n    case START_LOGIN:\r\n      return {\r\n        ...state,\r\n        isLoading: true\r\n      };\r\n    case LOGIN_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isAuthenticated: true,\r\n        token: payload.token,\r\n        error: null\r\n      };\r\n    case LOGIN_FAILURE:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: true,\r\n        errorMessage: payload.message\r\n      };\r\n    case START_GET_USER:\r\n      return {\r\n        ...state,\r\n        isLoading: true\r\n      };\r\n    case GET_USER_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isLogging: true,\r\n        token: payload.token,\r\n        name: payload.response.data.name,\r\n        no: payload.response.data.no,\r\n        auth: payload.response.data.authorities[0].authority,\r\n        id: payload.response.data.username,\r\n        error: null\r\n      };\r\n    case GET_USER_FAILURE:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: true\r\n      };\r\n    case RESET_ERROR:\r\n      return {\r\n        error: false\r\n      };\r\n    case START_LOGOUT:\r\n      return {\r\n        ...state,\r\n        isLogouting: true\r\n      };\r\n    case SIGN_OUT_SUCCESS:\r\n      return {\r\n        isLoading: false,\r\n        isLogging: false,\r\n        isLogouting: false,\r\n        isSignout: true,\r\n        isAuthenticated: false,\r\n        token: false,\r\n        name: false,\r\n        id: false,\r\n        no: false,\r\n        auth: false,\r\n        error: null\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}