{"ast":null,"code":"import _classCallCheck from \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\src\\\\components\\\\Header\\\\Notice\\\\NoticeList.js\";\nimport React, { Component } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { noticeupdateRead } from \"./NoticeListState\";\nimport { CircularProgress, MenuItem } from \"@material-ui/core\";\nimport { Typography } from 'components/Wrappers';\nimport classNames from \"classnames\";\nimport UserAvatar from 'components/UserAvatar';\nimport { Divider } from 'antd';\nimport { click } from 'store/modules/alarm';\n\nvar NoticeList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(NoticeList, _Component);\n\n  function NoticeList(props) {\n    var _this;\n\n    _classCallCheck(this, NoticeList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NoticeList).call(this, props));\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } // 클릭 시 현재 데이터 storage에 저장\n\n\n  _createClass(NoticeList, [{\n    key: \"handleClick\",\n    value: function handleClick(e, keyNo, day, actor, recordType) {\n      var _this$props = this.props,\n          noticeupdateRead = _this$props.noticeupdateRead,\n          token = _this$props.token,\n          auth = _this$props.auth,\n          click = _this$props.click;\n\n      if (sessionStorage.getItem(\"listkeyNo\") && sessionStorage.getItem(\"statekeyNo\") && sessionStorage.getItem(\"pagekeyNo\")) {\n        sessionStorage.removeItem(\"listkeyNo\");\n        sessionStorage.removeItem(\"statekeyNo\");\n        sessionStorage.removeItem(\"pagekeyNo\");\n\n        if (!sessionStorage.getItem(\"listkeyNo\") && !sessionStorage.getItem(\"statekeyNo\") && !sessionStorage.getItem(\"pagekeyNo\")) {\n          sessionStorage.setItem(\"listkeyNo\", keyNo);\n          sessionStorage.setItem(\"statekeyNo\", keyNo);\n          sessionStorage.setItem(\"pagekeyNo\", keyNo);\n          noticeupdateRead(keyNo, auth, recordType, token);\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          tables = _this$props2.tables,\n          isInit = _this$props2.isInit,\n          isLoading = _this$props2.isLoading,\n          language = _this$props2.language;\n      var Notice = tables.map(function (table, index) {\n        var _table$toJS = table.toJS(),\n            keyNo = _table$toJS.keyNo,\n            day = _table$toJS.day,\n            actor = _table$toJS.actor,\n            content = _table$toJS.content,\n            contentEn = _table$toJS.contentEn,\n            recordType = _table$toJS.recordType;\n\n        return React.createElement(\"div\", {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }, React.createElement(Divider, {\n          style: {\n            margin: '8px 0'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        }), React.createElement(NavLink, {\n          onClick: function onClick(e) {\n            _this2.handleClick(e, keyNo, day, actor, recordType);\n          },\n          to: recordType.includes(\"근태 신청\") || recordType.includes(\"근태 수정\") ? \"/app/workAttitude\" : recordType.includes(\"출퇴근 수정\") ? \"/app/commute\" : '#',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }, React.createElement(MenuItem, {\n          key: index,\n          className: styles.messageNotification,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: styles.messageNotificationSide,\n          style: {\n            width: 48\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        }, React.createElement(UserAvatar, {\n          color: \"success\",\n          name: recordType,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        }), React.createElement(Typography, {\n          size: \"sm\",\n          color: \"textSecondary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }, day.substr(5, 10))), React.createElement(\"div\", {\n          className: classNames(styles.messageNotificationSide, styles.messageNotificationBodySide),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }, React.createElement(Typography, {\n          weight: \"medium\",\n          gutterBottom: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        }, actor), React.createElement(Typography, {\n          color: \"textSecondary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        }, language === \"en\" ? contentEn : content)))));\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, //통신중이며 store 값이 초기화되지 않았으면, 로딩바생성\n      isInit === false && isLoading === true ? React.createElement(CircularProgress, {\n        size: 26,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }) : //통신 성공했으며, 값이 초기화되면, 알람리스트 개수 비교\n      sessionStorage.getItem(\"alarmnum\") !== tables.size && //알림리스트 개수가 변경되지 않았을 경우 \n      sessionStorage.getItem(\"alarmnum\") !== '0' ? //알림 리스트 개수가 0이 아니면 알림 list 출력\n      Notice : // 알림 리스트 개수가 0개\n      null);\n    }\n  }]);\n\n  return NoticeList;\n}(Component);\n\nexport default connect(function (state) {\n  return {\n    isInit: state.notice.isInit,\n    isLoading: state.notice.isLoading,\n    tables: state.notice.tables,\n    error: state.notice.error,\n    token: state.login.token,\n    isReading: state.notice.isReading,\n    language: state.language.language,\n    auth: state.login.auth\n  };\n}, {\n  noticeupdateRead: noticeupdateRead,\n  click: click\n})(NoticeList);\n\nvar styles = function styles(theme) {\n  return {\n    messageNotification: {\n      height: \"auto\",\n      display: \"flex\",\n      alignItems: \"center\",\n      \"&:hover, &:focus\": {\n        backgroundColor: theme.palette.background.light\n      }\n    },\n    messageNotificationSide: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      marginRight: theme.spacing.unit * 2\n    },\n    messageNotificationBodySide: {\n      alignItems: \"flex-start\",\n      marginRight: 0\n    }\n  };\n};","map":{"version":3,"sources":["F:/JAVA_WORKSPACE/frontend_react-20191018T023535Z-001/frontend_react/src/components/Header/Notice/NoticeList.js"],"names":["React","Component","NavLink","connect","noticeupdateRead","CircularProgress","MenuItem","Typography","classNames","UserAvatar","Divider","click","NoticeList","props","handleClick","bind","e","keyNo","day","actor","recordType","token","auth","sessionStorage","getItem","removeItem","setItem","tables","isInit","isLoading","language","Notice","map","table","index","toJS","content","contentEn","margin","includes","styles","messageNotification","messageNotificationSide","width","substr","messageNotificationBodySide","size","state","notice","error","login","isReading","theme","height","display","alignItems","backgroundColor","palette","background","light","flexDirection","marginRight","spacing","unit"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { noticeupdateRead } from \"./NoticeListState\";\r\nimport { CircularProgress, MenuItem } from \"@material-ui/core\";\r\nimport { Typography } from 'components/Wrappers';\r\nimport classNames from \"classnames\";\r\nimport UserAvatar from 'components/UserAvatar';\r\nimport { Divider } from 'antd';\r\nimport { click } from 'store/modules/alarm';\r\n\r\nclass NoticeList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    // 클릭 시 현재 데이터 storage에 저장\r\n    handleClick(e, keyNo, day, actor, recordType) {\r\n        const { noticeupdateRead, token, auth, click } = this.props;\r\n        if(sessionStorage.getItem(\"listkeyNo\") && sessionStorage.getItem(\"statekeyNo\") && sessionStorage.getItem(\"pagekeyNo\")){\r\n            sessionStorage.removeItem(\"listkeyNo\");\r\n            sessionStorage.removeItem(\"statekeyNo\");\r\n            sessionStorage.removeItem(\"pagekeyNo\");\r\n            if(!sessionStorage.getItem(\"listkeyNo\") && !sessionStorage.getItem(\"statekeyNo\") && !sessionStorage.getItem(\"pagekeyNo\"))\r\n            {\r\n                sessionStorage.setItem(\"listkeyNo\", keyNo);\r\n                sessionStorage.setItem(\"statekeyNo\", keyNo);\r\n                sessionStorage.setItem(\"pagekeyNo\", keyNo);\r\n                noticeupdateRead(keyNo, auth, recordType, token);\r\n            }\r\n        }\r\n    }\r\n\r\n   render() {\r\n    const { tables, isInit, isLoading, language } = this.props;\r\n    \r\n    const Notice = tables.map(\r\n        (table, index) => {\r\n            const{ keyNo, day, actor, content, contentEn, recordType } = table.toJS();\r\n            \r\n            return (\r\n                <div key={index} >\r\n                    <Divider style={{margin: '8px 0'}} />\r\n                    <NavLink\r\n                     onClick={(e) => {this.handleClick(e, keyNo, day, actor, recordType)}} \r\n                        to={\r\n                        (recordType.includes(\"근태 신청\") || recordType.includes(\"근태 수정\")) ?\r\n                        \"/app/workAttitude\" : recordType.includes(\"출퇴근 수정\") ?\r\n                        \"/app/commute\" : '#'\r\n                        }>\r\n                        <MenuItem key={index} className={styles.messageNotification} >\r\n                            <div className={styles.messageNotificationSide} style={{width: 48}}>\r\n                            <UserAvatar color={\"success\"} name={recordType} />\r\n                                <Typography size=\"sm\" color=\"textSecondary\">\r\n                                    {day.substr(5,10)}\r\n                                </Typography>\r\n                            </div>\r\n                            <div\r\n                                className={classNames(\r\n                                    styles.messageNotificationSide,\r\n                                    styles.messageNotificationBodySide\r\n                                )}>\r\n                                    <Typography weight=\"medium\" gutterBottom>\r\n                                        {actor}\r\n                                    </Typography>\r\n                                    <Typography color=\"textSecondary\">\r\n                                        {language === \"en\" ? contentEn : content}\r\n                                    </Typography>     \r\n                            </div>\r\n                        </MenuItem>\r\n                    </NavLink>    \r\n                </div>\r\n            );\r\n        }\r\n    );\r\n        return (\r\n            <div>\r\n                {\r\n                    //통신중이며 store 값이 초기화되지 않았으면, 로딩바생성\r\n                    (isInit === false && isLoading === true) ? \r\n                    <CircularProgress size={26} /> :\r\n                        //통신 성공했으며, 값이 초기화되면, 알람리스트 개수 비교\r\n                        sessionStorage.getItem(\"alarmnum\") !== tables.size &&\r\n                            //알림리스트 개수가 변경되지 않았을 경우 \r\n                            sessionStorage.getItem(\"alarmnum\") !== '0' ?\r\n                                //알림 리스트 개수가 0이 아니면 알림 list 출력\r\n                                Notice :\r\n                                // 알림 리스트 개수가 0개\r\n                                null\r\n                    \r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    state => ({\r\n        isInit: state.notice.isInit,\r\n        isLoading: state.notice.isLoading,\r\n        tables: state.notice.tables,\r\n        error: state.notice.error,\r\n        token: state.login.token,\r\n        isReading: state.notice.isReading,\r\n        language: state.language.language,\r\n        auth: state.login.auth\r\n    }),\r\n    { noticeupdateRead, click }\r\n)(NoticeList);\r\n\r\nconst styles = theme => ({\r\n    messageNotification: {\r\n        height: \"auto\",\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        \"&:hover, &:focus\": {\r\n          backgroundColor: theme.palette.background.light\r\n        }\r\n    },\r\n    messageNotificationSide: {\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n      alignItems: \"center\",\r\n      marginRight: theme.spacing.unit * 2\r\n    },\r\n    messageNotificationBodySide: {\r\n      alignItems: \"flex-start\",\r\n      marginRight: 0\r\n    }\r\n});"]},"metadata":{},"sourceType":"module"}