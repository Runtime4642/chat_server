{"ast":null,"code":"var _jsxFileName = \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\src\\\\components\\\\chat\\\\chat.js\";\nimport React, { Component } from 'react';\nimport { Input } from 'antd';\nimport './chat.css';\nimport SockJsClient from \"react-stomp\";\nimport UsernameGenerator from \"username-generator\";\nimport Fetch from \"json-fetch\";\nimport { TalkBox } from \"react-talk\";\nimport randomstring from \"randomstring\";\nimport Nickname from '../../components/nickname';\nimport { UserOutlined } from '@ant-design/icons';\n\nclass chat extends Component {\n  constructor(props, context) {\n    super(props);\n\n    this.onMessageReceive = (msg, topic) => {\n      if (msg.author !== this.nickName ? this.nickName : this.randomUserName) this.setState(prevState => ({\n        messages: [...prevState.messages, msg]\n      }));\n    };\n\n    this.sendMessage = (msg, selfMsg) => {\n      // selfMsg is the message object constructed from the message typed by the current user\n      // NOTE: selfMsg doesn't include timestamp and needs to be added by the user of the module\n      // in client or server side as required\n      selfMsg[\"timestamp\"] = new Date().getTime();\n      this.setState(prevState => ({\n        messages: [...prevState.messages, selfMsg]\n      })); // If message sending failed return false otherwise return true\n\n      try {\n        // Insert code to send the message below\n        const s = {\n          name: selfMsg.author,\n          session: \"0\",\n          content: msg,\n          timestamp: selfMsg[\"timestamp\"]\n        };\n        this.clientRef.sendMessage(\"/app/hello\", JSON.stringify(s));\n        return true;\n      } catch (e) {\n        return false;\n      }\n    };\n\n    this.nickChange = input => {\n      this.nickName = input.target.value;\n    };\n\n    this.randomUserName = UsernameGenerator.generateUsername(\"-\");\n    this.randomUserId = randomstring.generate();\n    this.nickName = \"\";\n    this.state = {\n      clientConnected: false,\n      messages: [//     {\n        //     \"author\": \"Ponger\",\n        //     \"authorId\": \"pong3\",\n        //     \"message\": \"How you doin'!\",\n        //     \"timestamp\": new Date().getTime()\n        // },\n        // {\n        //     \"author\": \"Ponger2\",\n        //     \"authorId\": \"pong4\",\n        //     \"message\": \"zzz!\",\n        //     \"timestamp\": Date.now().toString()\n        // }\n      ]\n    };\n  } //   componentWillMount() {\n  //     console.log(\"call history\");\n  //     Fetch(\"/history\", {\n  //       method: \"GET\"\n  //     }).then((response) => {\n  //       this.setState({ messages: response.body });\n  //     });\n  //   }\n\n\n  render() {\n    const wsSourceUrl = \"http://10.51.15.31:8076/chat\";\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"chat-viewer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      size: \"large\",\n      placeholder: \"\\uB2C9\\uB124\\uC784\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\",\n      prefix: /*#__PURE__*/React.createElement(UserOutlined, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 70\n        }\n      }),\n      onChange: this.nickChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(TalkBox, {\n      topic: \"\\uB300\\uD654\\uBC29\\u314E\\u314E\",\n      currentUserId: this.nickName ? this.nickName : this.randomUserId,\n      currentUser: this.nickName ? this.nickName : this.randomUserName,\n      messages: this.state.messages,\n      onSendMessage: this.sendMessage,\n      connected: this.state.clientConnected,\n      onKeyDown: this.updateInputValue,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(SockJsClient, {\n      url: wsSourceUrl,\n      topics: [\"/topics/testchat\"],\n      onMessage: this.onMessageReceive,\n      ref: client => {\n        this.clientRef = client;\n      },\n      onConnect: () => {\n        this.setState({\n          clientConnected: true\n        });\n      },\n      onDisconnect: () => {\n        this.setState({\n          clientConnected: false\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default chat;","map":{"version":3,"sources":["F:/JAVA_WORKSPACE/frontend_react-20191018T023535Z-001/frontend_react/src/components/chat/chat.js"],"names":["React","Component","Input","SockJsClient","UsernameGenerator","Fetch","TalkBox","randomstring","Nickname","UserOutlined","chat","constructor","props","context","onMessageReceive","msg","topic","author","nickName","randomUserName","setState","prevState","messages","sendMessage","selfMsg","Date","getTime","s","name","session","content","timestamp","clientRef","JSON","stringify","e","nickChange","input","target","value","generateUsername","randomUserId","generate","state","clientConnected","render","wsSourceUrl","updateInputValue","client"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {Input} from 'antd';\r\nimport './chat.css';\r\nimport SockJsClient  from \"react-stomp\";\r\nimport UsernameGenerator from \"username-generator\";\r\nimport Fetch from \"json-fetch\";\r\nimport { TalkBox } from \"react-talk\";\r\nimport randomstring from\"randomstring\";\r\nimport Nickname from '../../components/nickname';\r\nimport { UserOutlined } from '@ant-design/icons';\r\n\r\n\r\nclass chat extends Component {\r\n\r\n    constructor(props, context) {\r\n        super(props);\r\n\r\n        this.randomUserName = UsernameGenerator.generateUsername(\"-\");\r\n        this.randomUserId = randomstring.generate();\r\n        this.nickName = \"\";\r\n       this.state = {\r\n            clientConnected:false,\r\n            messages: [\r\n            //     {\r\n\r\n            //     \"author\": \"Ponger\",\r\n            //     \"authorId\": \"pong3\",\r\n            //     \"message\": \"How you doin'!\",\r\n            //     \"timestamp\": new Date().getTime()\r\n            // },\r\n            // {\r\n            //     \"author\": \"Ponger2\",\r\n            //     \"authorId\": \"pong4\",\r\n            //     \"message\": \"zzz!\",\r\n            //     \"timestamp\": Date.now().toString()\r\n            // }\r\n        ]\r\n            \r\n        }\r\n    }\r\n    \r\n\r\n\r\n    //   componentWillMount() {\r\n    //     console.log(\"call history\");\r\n    //     Fetch(\"/history\", {\r\n    //       method: \"GET\"\r\n    //     }).then((response) => {\r\n    //       this.setState({ messages: response.body });\r\n    //     });\r\n    //   }\r\n\r\n          onMessageReceive = (msg, topic) => {\r\n            if(msg.author !== this.nickName ? this.nickName  : this.randomUserName)\r\n            this.setState(prevState => ({\r\n              messages: [...prevState.messages, msg]\r\n            }));\r\n          }\r\n\r\n          sendMessage = (msg, selfMsg) => {\r\n            // selfMsg is the message object constructed from the message typed by the current user\r\n            // NOTE: selfMsg doesn't include timestamp and needs to be added by the user of the module\r\n            // in client or server side as required\r\n\r\n            selfMsg[\"timestamp\"] = new Date().getTime();\r\n            this.setState(prevState => ({\r\n                messages: [...prevState.messages, selfMsg]\r\n            }));\r\n            // If message sending failed return false otherwise return true\r\n            try {\r\n              // Insert code to send the message below\r\n\r\n              const s = {name: selfMsg.author, session: \"0\", content: msg,timestamp:selfMsg[\"timestamp\"]}\r\n              this.clientRef.sendMessage(\"/app/hello\", JSON.stringify(s));\r\n              \r\n              return true;\r\n            } catch (e) {\r\n              return false;\r\n            }\r\n          }\r\n\r\n          nickChange = (input)=>{\r\n            this.nickName  = input.target.value\r\n          }\r\n      \r\n\r\n    render() {\r\n        const wsSourceUrl = \"http://10.51.15.31:8076/chat\";\r\n        return (\r\n            <div id=\"chat-viewer\">\r\n                <Input size=\"large\" placeholder=\"닉네임을 입력하세요\" prefix={<UserOutlined />} onChange={this.nickChange}/>\r\n            <TalkBox topic=\"대화방ㅎㅎ\" currentUserId={this.nickName ? this.nickName  : this.randomUserId }\r\n                currentUser={this.nickName ? this.nickName  : this.randomUserName} messages={this.state.messages}\r\n               onSendMessage={ this.sendMessage } connected={this.state.clientConnected}\r\n               onKeyDown={this.updateInputValue}\r\n               />\r\n\r\n            <SockJsClient\r\n            url={wsSourceUrl}\r\n            topics={[\"/topics/testchat\"]}\r\n            onMessage={this.onMessageReceive }\r\n            ref={(client) => { this.clientRef = client; }} \r\n            onConnect={ () => {this.setState({ clientConnected: true }) } }\r\n            onDisconnect={ () => { this.setState({ clientConnected: false }) } }\r\n            />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default chat;"]},"metadata":{},"sourceType":"module"}