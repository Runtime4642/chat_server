{"ast":null,"code":"import { compose, withState, withHandlers, lifecycle } from \"recompose\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport LoginView from \"./LoginView\";\nimport { loginUser, resetError } from \"./LoginState\";\nimport locale from 'locale';\nexport default compose(connect(function (state) {\n  return {\n    isLoading: state.login.isLoading,\n    isAuthenticated: state.login.isAuthenticated,\n    language: state.language.language,\n    error: state.login.error,\n    errorMessage: state.login.errorMessage\n  };\n}, {\n  loginUser: loginUser,\n  resetError: resetError\n}), withRouter, withState(\"nameValue\", \"setNameValue\", \"\"), withState(\"loginValue\", \"setLoginValue\", \"\"), withState(\"passwordValue\", \"setPasswordValue\", \"\"), withHandlers({\n  handleInput: function handleInput(props) {\n    return function (e) {\n      var input = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"login\";\n\n      if (props.error) {\n        props.resetError();\n      }\n\n      if (input === \"login\") {\n        props.setLoginValue(e.target.value);\n      } else if (input === \"password\") {\n        props.setPasswordValue(e.target.value);\n      } else if (input === \"name\") {\n        props.setNameValue(e.target.value);\n      }\n    };\n  },\n  handleLoginButtonClick: function handleLoginButtonClick(props) {\n    return function () {\n      props.loginUser(props.loginValue, props.passwordValue);\n    };\n  },\n  handleKeyPress: function handleKeyPress(props) {\n    return function (e) {\n      if (e.charCode === 13) {\n        props.loginUser(props.loginValue, props.passwordValue);\n      }\n    };\n  }\n}), lifecycle({\n  componentDidMount: function componentDidMount() {\n    document.title = locale.loginTitle[this.props.language];\n  },\n  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n    if (!this.props.error && nextProps.error) {\n      this.props.setPasswordValue(\"\");\n    }\n  }\n}))(LoginView);","map":{"version":3,"sources":["F:/JAVA_WORKSPACE/frontend_react-20191018T023535Z-001/frontend_react/src/pages/login/LoginContainer.js"],"names":["compose","withState","withHandlers","lifecycle","withRouter","connect","LoginView","loginUser","resetError","locale","state","isLoading","login","isAuthenticated","language","error","errorMessage","handleInput","props","e","input","setLoginValue","target","value","setPasswordValue","setNameValue","handleLoginButtonClick","loginValue","passwordValue","handleKeyPress","charCode","componentDidMount","document","title","loginTitle","componentWillReceiveProps","nextProps"],"mappings":"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","sourcesContent":["import { compose, withState, withHandlers, lifecycle } from \"recompose\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport LoginView from \"./LoginView\";\r\nimport { loginUser, resetError } from \"./LoginState\";\r\n\r\nimport locale from 'locale';\r\n\r\nexport default compose(\r\n  connect(\r\n    state => ({\r\n      isLoading: state.login.isLoading,\r\n      isAuthenticated: state.login.isAuthenticated,\r\n      language: state.language.language,\r\n      error: state.login.error,\r\n      errorMessage: state.login.errorMessage\r\n    }),\r\n    { loginUser, resetError }\r\n  ),\r\n  withRouter,\r\n  withState(\"nameValue\", \"setNameValue\", \"\"),\r\n  withState(\"loginValue\", \"setLoginValue\", \"\"),\r\n  withState(\"passwordValue\", \"setPasswordValue\", \"\"),\r\n  withHandlers({\r\n    handleInput: props => (e, input = \"login\") => {\r\n      if (props.error) {\r\n        props.resetError();\r\n      }\r\n\r\n      if (input === \"login\") {\r\n        props.setLoginValue(e.target.value);\r\n      } else if (input === \"password\") {\r\n        props.setPasswordValue(e.target.value);\r\n      } else if (input === \"name\") {\r\n        props.setNameValue(e.target.value);\r\n      }\r\n    },\r\n    handleLoginButtonClick: props => () => {\r\n      props.loginUser(props.loginValue, props.passwordValue);\r\n    },\r\n    handleKeyPress: props => (e) => {\r\n      if(e.charCode === 13) {\r\n        props.loginUser(props.loginValue, props.passwordValue);\r\n      }\r\n    }\r\n  }),\r\n  lifecycle({\r\n    componentDidMount() {\r\n      document.title = locale.loginTitle[this.props.language];\r\n    },\r\n    componentWillReceiveProps(nextProps) {\r\n      if (!this.props.error && nextProps.error) {\r\n        this.props.setPasswordValue(\"\");\r\n      }\r\n    }\r\n  })\r\n)(LoginView);\r\n"]},"metadata":{},"sourceType":"module"}