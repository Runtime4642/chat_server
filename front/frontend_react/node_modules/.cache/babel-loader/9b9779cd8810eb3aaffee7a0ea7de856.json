{"ast":null,"code":"import _regeneratorRuntime from \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\src\\\\containers\\\\list\\\\LIstTableContainer.js\";\nimport React, { Component } from 'react';\nimport TableList from 'components/list/TableList';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport * as listActions from 'store/modules/list';\nimport * as getCalList from 'store/modules/commutecalendarlist';\nimport * as stateActions from 'store/modules/state';\nimport * as paginationList from 'store/modules/pagination';\nimport locale from 'locale';\n\nvar LIstTableContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(LIstTableContainer, _Component);\n\n  function LIstTableContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, LIstTableContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(LIstTableContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.getFullList =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var _this$props, activePage, ListActions, select, GetCalList, PaginationActions, language, _this$props2, token, auth, loginUserNo, date, dateString, search, listSearch, pageNumber;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this$props = _this.props, activePage = _this$props.activePage, ListActions = _this$props.ListActions, select = _this$props.select, GetCalList = _this$props.GetCalList, PaginationActions = _this$props.PaginationActions, language = _this$props.language;\n              _this$props2 = _this.props, token = _this$props2.token, auth = _this$props2.auth, loginUserNo = _this$props2.loginUserNo;\n              _context.prev = 2;\n\n              if (!(auth === \"ROLE_ADMIN\")) {\n                _context.next = 8;\n                break;\n              }\n\n              _context.next = 6;\n              return ListActions.getTableList('', activePage, select, token, language);\n\n            case 6:\n              _context.next = 19;\n              break;\n\n            case 8:\n              date = new Date();\n              dateString = new Date(date.getTime() - date.getTimezoneOffset() * 60000).toISOString().split(\"T\")[0].substring(0, 7);\n              search = {\n                searchFromDate: dateString,\n                searchUserNo: loginUserNo,\n                searchState: \"전체\"\n              };\n              listSearch = {\n                searchUserNo: loginUserNo,\n                select: true\n              };\n              pageNumber = 1;\n              _context.next = 15;\n              return PaginationActions.getSearchPage(listSearch, token);\n\n            case 15:\n              _context.next = 17;\n              return ListActions.getTableList(listSearch, pageNumber, listSearch.select, token, language);\n\n            case 17:\n              _context.next = 19;\n              return GetCalList.getList(search, token, true);\n\n            case 19:\n              _context.next = 24;\n              break;\n\n            case 21:\n              _context.prev = 21;\n              _context.t0 = _context[\"catch\"](2);\n              console.log(_context.t0);\n\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 21]]);\n    }));\n\n    _this.getAlarmSearchList =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(keyNo) {\n        var _this$props3, token, language, PaginationActions, ListActions, StateActions, pageNumber, search;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this$props3 = _this.props, token = _this$props3.token, language = _this$props3.language, PaginationActions = _this$props3.PaginationActions, ListActions = _this$props3.ListActions, StateActions = _this$props3.StateActions;\n                pageNumber = 1;\n                search = {\n                  keyNo: keyNo,\n                  select: false\n                };\n                _context2.prev = 3;\n                _context2.next = 6;\n                return StateActions.getCommuteSearchStateList(search, token);\n\n              case 6:\n                _context2.next = 8;\n                return PaginationActions.getSearchPage(search, token);\n\n              case 8:\n                _context2.next = 10;\n                return ListActions.getTableList(search, pageNumber, search.select, token, language);\n\n              case 10:\n                _context2.next = 15;\n                break;\n\n              case 12:\n                _context2.prev = 12;\n                _context2.t0 = _context2[\"catch\"](3);\n                console.log(_context2.t0);\n\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[3, 12]]);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.updateRead = function (no) {\n      var _this$props4 = _this.props,\n          token = _this$props4.token,\n          auth = _this$props4.auth,\n          ListActions = _this$props4.ListActions;\n      var recordType = \"출퇴근\";\n      ListActions.updateRead(no, auth, recordType, token);\n    };\n\n    _this.handleChangeInput = function (_ref3) {\n      var name = _ref3.name,\n          value = _ref3.value;\n      var _this$props5 = _this.props,\n          ListActions = _this$props5.ListActions,\n          auth = _this$props5.auth; // 권한이 유저일 경우에 출퇴근 칼럼 클릭시 read update\n\n      if (name === 'startNo' && auth === 'ROLE_USER') {\n        _this.updateRead(value);\n      }\n\n      ListActions.changeInput({\n        name: name,\n        value: value\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(LIstTableContainer, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      document.title = locale.commuteListTitle[nextProps.language];\n\n      if (nextProps.userNo !== this.props.userNo) {\n        this.handleChangeInput({\n          name: 'userNo',\n          value: nextProps.userNo\n        });\n      }\n\n      return true;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var language = this.props.language;\n      document.title = locale.commuteListTitle[language];\n    }\n    /* \r\n    주영돈 : WorkAttitudeListContainer.js의 getAlarmSearchList처럼\r\n    keyNo에 대한 데이터 가져오는 코드 작성하시면 됩니다.\r\n    */\n\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var auth = this.props.auth;\n      var keyNo = null;\n\n      if (sessionStorage.getItem(\"listkeyNo\") !== \"define\") {\n        keyNo = sessionStorage.getItem(\"listkeyNo\");\n        sessionStorage.removeItem(\"listkeyNo\");\n        sessionStorage.setItem(\"listkeyNo\", \"define\");\n      } // USER가 알림(출퇴근 수정) 클릭했을 경우\n\n\n      if (keyNo !== null && auth === 'ROLE_USER') {\n        this.getAlarmSearchList(keyNo);\n      } else {\n        this.getFullList();\n      }\n    } // (list, calendar)리스트 클릭시 updateRead액션 발생\n    // MongoDB의 key_no와 startNo가 일치하면 read true로 update\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n          tables = _this$props6.tables,\n          loading = _this$props6.loading,\n          changeView = _this$props6.changeView,\n          language = _this$props6.language;\n      var handleChangeInput = this.handleChangeInput;\n      if (changeView !== 'table') return null;\n      if (loading && tables <= 0) return null;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, React.createElement(TableList, {\n        language: language,\n        tables: tables,\n        handleChangeInput: handleChangeInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return LIstTableContainer;\n}(Component);\n\nexport default connect(function (state) {\n  return {\n    tables: state.list.get('tables'),\n    changeView: state.list.get('changeView'),\n    startNo: state.list.get('startNo'),\n    endNo: state.list.get('endNo'),\n    select: state.list.get('select'),\n    userNo: state.list.get('userNo'),\n    loading: state.pender.pending['list/FULL_TABLE_LIST'],\n    activePage: state.pagination.get('activePage'),\n    token: state.login.token,\n    auth: state.login.auth,\n    loginUserNo: state.login.no,\n    language: state.language.language\n  };\n}, function (dispatch) {\n  return {\n    ListActions: bindActionCreators(listActions, dispatch),\n    GetCalList: bindActionCreators(getCalList, dispatch),\n    StateActions: bindActionCreators(stateActions, dispatch),\n    PaginationActions: bindActionCreators(paginationList, dispatch)\n  };\n})(LIstTableContainer);","map":{"version":3,"sources":["F:/JAVA_WORKSPACE/frontend_react-20191018T023535Z-001/frontend_react/src/containers/list/LIstTableContainer.js"],"names":["React","Component","TableList","bindActionCreators","connect","listActions","getCalList","stateActions","paginationList","locale","LIstTableContainer","getFullList","props","activePage","ListActions","select","GetCalList","PaginationActions","language","token","auth","loginUserNo","getTableList","date","Date","dateString","getTime","getTimezoneOffset","toISOString","split","substring","search","searchFromDate","searchUserNo","searchState","listSearch","pageNumber","getSearchPage","getList","console","log","getAlarmSearchList","keyNo","StateActions","getCommuteSearchStateList","updateRead","no","recordType","handleChangeInput","name","value","changeInput","nextProps","nextState","document","title","commuteListTitle","userNo","sessionStorage","getItem","removeItem","setItem","tables","loading","changeView","state","list","get","startNo","endNo","pender","pending","pagination","login","dispatch"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport TableList from 'components/list/TableList';\r\nimport {bindActionCreators} from 'redux';\r\nimport {connect} from 'react-redux';\r\nimport * as listActions from 'store/modules/list';\r\nimport * as getCalList from 'store/modules/commutecalendarlist';\r\nimport * as stateActions from 'store/modules/state';\r\nimport * as paginationList from 'store/modules/pagination';\r\nimport locale from 'locale';\r\n\r\n\r\nclass LIstTableContainer extends Component {\r\n\r\n    /*\r\n    getPostList = () => {\r\n        // 페이지와 태그 값을 부모로부터 받아 옵니다.\r\n        const { activePage, ListActions } = this.props;\r\n        \r\n        const search = {\r\n            startdate : '2019-04-25',\r\n            enddate : '2019-04-25',\r\n            name : '박성혜'\r\n        }\r\n        const page = activePage;\r\n        //console.log(search);\r\n        ListActions.getTableList(search, page);\r\n      }\r\n    \r\n    componentDidMount() {\r\n    this.getPostList();\r\n    }\r\n    */\r\n\r\n    getFullList = async() => {\r\n        const { activePage, ListActions, select, GetCalList, PaginationActions, language } = this.props;\r\n        const { token,auth,loginUserNo } = this.props;\r\n        \r\n        try {\r\n\r\n            if (auth === \"ROLE_ADMIN\") {\r\n                await ListActions.getTableList('', activePage, select, token, language);\r\n            } else {\r\n\r\n                let date = new Date();\r\n                let dateString = new Date(date.getTime() - (date.getTimezoneOffset() * 60000 ))\r\n                                        .toISOString()\r\n                                        .split(\"T\")[0].substring(0,7);\r\n\r\n                const search = {\r\n                    searchFromDate: dateString,\r\n                    searchUserNo: loginUserNo,\r\n                    searchState: \"전체\"\r\n                }\r\n\r\n                const listSearch = {\r\n                    searchUserNo:loginUserNo,\r\n                    select:true\r\n                }\r\n                \r\n                const pageNumber = 1;\r\n                await PaginationActions.getSearchPage(listSearch, token);\r\n                await ListActions.getTableList(listSearch, pageNumber, listSearch.select, token, language);\r\n                //달력\r\n                await GetCalList.getList(search, token, true);\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        document.title = locale.commuteListTitle[nextProps.language];\r\n\r\n        if (nextProps.userNo !== this.props.userNo) {\r\n            this.handleChangeInput({name: 'userNo', value: nextProps.userNo});\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { language } = this.props;\r\n        document.title = locale.commuteListTitle[language];\r\n    }\r\n\r\n    /* \r\n    주영돈 : WorkAttitudeListContainer.js의 getAlarmSearchList처럼\r\n    keyNo에 대한 데이터 가져오는 코드 작성하시면 됩니다.\r\n    */\r\n    getAlarmSearchList = async(keyNo) => {\r\n        const { token, language, PaginationActions, ListActions, StateActions } = this.props;\r\n        const pageNumber = 1;\r\n\r\n        const search = {\r\n            keyNo\r\n            ,select: false\r\n        }\r\n\r\n        try {\r\n            await StateActions.getCommuteSearchStateList(search, token);\r\n            await PaginationActions.getSearchPage(search, token);\r\n            await ListActions.getTableList(search, pageNumber, search.select, token, language);\r\n        } catch(e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        const {auth} = this.props;\r\n        let keyNo = null;\r\n        if(sessionStorage.getItem(\"listkeyNo\") !== \"define\") {\r\n            keyNo = sessionStorage.getItem(\"listkeyNo\");\r\n            sessionStorage.removeItem(\"listkeyNo\");\r\n            sessionStorage.setItem(\"listkeyNo\", \"define\");\r\n        }\r\n        // USER가 알림(출퇴근 수정) 클릭했을 경우\r\n        if(keyNo !== null && auth === 'ROLE_USER') {\r\n            this.getAlarmSearchList(keyNo);\r\n        } else {\r\n            this.getFullList();\r\n        }\r\n    }\r\n\r\n    // (list, calendar)리스트 클릭시 updateRead액션 발생\r\n    // MongoDB의 key_no와 startNo가 일치하면 read true로 update\r\n    updateRead = (no) => {\r\n        const { token, auth, ListActions } = this.props;\r\n        const recordType = \"출퇴근\"\r\n        ListActions.updateRead(no, auth, recordType, token);\r\n    }\r\n\r\n    handleChangeInput = ({name, value}) => {\r\n        const {ListActions, auth} = this.props;\r\n        // 권한이 유저일 경우에 출퇴근 칼럼 클릭시 read update\r\n        if(name === 'startNo' && auth === 'ROLE_USER') {\r\n            this.updateRead(value);\r\n        }\r\n        ListActions.changeInput({name, value});\r\n    }\r\n\r\n    render() {\r\n        const {tables, loading, changeView, language} = this.props;\r\n        const {handleChangeInput} = this;\r\n\r\n        if (changeView !== 'table') return null;\r\n        if (loading && tables <= 0) return null;\r\n\r\n        return (\r\n            <div>\r\n                <TableList language={language} tables={tables} handleChangeInput={handleChangeInput}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        tables: state.list.get('tables'),\r\n        changeView: state.list.get('changeView'),\r\n        startNo: state.list.get('startNo'),\r\n        endNo: state.list.get('endNo'),\r\n        select: state.list.get('select'),\r\n        userNo: state.list.get('userNo'),\r\n        loading: state.pender.pending['list/FULL_TABLE_LIST'],\r\n        activePage: state.pagination.get('activePage'),\r\n        token: state.login.token,\r\n        auth: state.login.auth,\r\n        loginUserNo: state.login.no,\r\n        language: state.language.language\r\n    }),\r\n    (dispatch) => ({\r\n        ListActions: bindActionCreators(listActions, dispatch),\r\n        GetCalList: bindActionCreators(getCalList, dispatch),\r\n        StateActions: bindActionCreators(stateActions, dispatch),\r\n        PaginationActions: bindActionCreators(paginationList, dispatch),\r\n    })\r\n)(LIstTableContainer);"]},"metadata":{},"sourceType":"module"}