{"ast":null,"code":"var _jsxFileName = \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\src\\\\components\\\\chat\\\\chat.js\";\nimport React, { Component } from 'react';\nimport { Input, Table } from 'antd';\nimport './chat.css';\nimport SockJsClient from \"react-stomp\";\nimport UsernameGenerator from \"username-generator\";\nimport Fetch from \"json-fetch\";\nimport { TalkBox } from \"react-talk\";\nimport randomstring from \"randomstring\";\nimport { UserOutlined } from '@ant-design/icons';\nimport * as api from 'lib/api';\n\nclass chat extends Component {\n  constructor(props, context) {\n    super(props);\n\n    this.onMessageReceive = (msg, topic) => {\n      if (msg.author !== (this.nickName ? this.nickName : this.randomUserName)) this.setState(prevState => ({\n        messages: [...prevState.messages, msg]\n      }));\n      if (this.box) this.box.scrollToBottom();\n\n      if (msg.cnt) {\n        this.cnt = msg.cnt;\n      }\n\n      if (msg.list) {\n        this.setState({\n          dataSource: msg.list\n        }); //this.dataSource=msg.list;\n      } // this.scrollToBottom();\n      //$('.talk-box-body').animate({scrollTop: $('.talk-box-body').scrollHeight})\n\n    };\n\n    this.sendMessage = (msg, selfMsg) => {\n      // selfMsg is the message object constructed from the message typed by the current user\n      // NOTE: selfMsg doesn't include timestamp and needs to be added by the user of the module\n      // in client or server side as required\n      selfMsg[\"timestamp\"] = new Date().getTime();\n      this.setState(prevState => ({\n        messages: [...prevState.messages, selfMsg]\n      })); // If message sending failed return false otherwise return true\n\n      try {\n        // Insert code to send the message below\n        const s = {\n          name: this.nickName ? this.nickName : selfMsg.author,\n          session: \"0\",\n          content: msg,\n          timestamp: selfMsg[\"timestamp\"]\n        };\n        this.clientRef.sendMessage(\"/app/hello\", JSON.stringify(s));\n        return true;\n      } catch (e) {\n        return false;\n      }\n    };\n\n    this.nickChange = input => {\n      this.nickName = input.target.value;\n    };\n\n    this.randomUserName = UsernameGenerator.generateUsername(\"-\"); // this.randomUserId = randomstring.generate();\n\n    this.nickName = \"\";\n    this.box = null;\n    this.cnt = 0;\n    this.columns = [{\n      title: 'Ip Address',\n      dataIndex: 'ip' // key: 'ip',\n\n    }, {\n      title: 'Session id',\n      dataIndex: 'sessionId',\n      key: 'sessionId'\n    }];\n    this.state = {\n      ip: null,\n      clientConnected: false,\n      messages: [//     {\n        //     \"author\": \"Ponger\",\n        //     \"authorId\": \"pong3\",\n        //     \"message\": \"How you doin'!\",\n        //     \"timestamp\": new Date().getTime()\n        // },\n        // {\n        //     \"author\": \"Ponger2\",\n        //     \"authorId\": \"pong4\",\n        //     \"message\": \"zzz!\",\n        //     \"timestamp\": Date.now().toString()\n        // }\n      ]\n    };\n  }\n\n  componentDidMount() {\n    var history = [];\n    var reqIp;\n    api.gethistory().then(function (response) {\n      if (response.status == 200) {\n        debugger;\n        console.log(response);\n        if (response.data.history) response.data.history.forEach((item, idx) => {\n          history.push({\n            \"author\": item[\"author\"],\n            \"authorId\": item[\"authorId\"],\n            \"message\": item[\"message\"],\n            \"timestamp\": item[\"timestamp\"]\n          });\n        });\n        reqIp = response.data.ip;\n      } else {}\n    }).catch(function (error) {\n      console.log(error);\n    });\n    this.setState({\n      messages: history,\n      ip: reqIp\n    });\n  }\n\n  render() {\n    //console.log(\"chat렌더!\")\n    console.log(this.state.ip);\n    const wsSourceUrl = \"http://10.51.15.31:8076/chat\";\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"chat-viewer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"nic-name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      size: \"large\",\n      placeholder: \"\\uB2C9\\uB124\\uC784\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\",\n      prefix: /*#__PURE__*/React.createElement(UserOutlined, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 70\n        }\n      }),\n      onChange: this.nickChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"chat-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TalkBox, {\n      topic: \"\\uB300\\uD654\\uBC29\\u314E\\u314E\",\n      currentUserId: this.state.ip,\n      currentUser: this.nickName ? this.nickName : this.randomUserName,\n      messages: this.state.messages,\n      onSendMessage: this.sendMessage,\n      connected: this.state.clientConnected,\n      onKeyDown: this.updateInputValue,\n      ref: _ref => {\n        this.box = _ref;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"chat-connect-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      dataSource: this.state.dataSource,\n      columns: this.columns,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }\n    }), \"\\uD604\\uC7AC\\uC785\\uC7A5\\uC778\\uC6D0:\", this.cnt), /*#__PURE__*/React.createElement(SockJsClient, {\n      url: wsSourceUrl,\n      topics: [\"/topics/testchat\"],\n      onMessage: this.onMessageReceive,\n      ref: client => {\n        this.clientRef = client;\n      },\n      onConnect: () => {\n        this.setState({\n          clientConnected: true\n        });\n      },\n      onDisconnect: () => {\n        this.setState({\n          clientConnected: false\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 13\n      }\n    })));\n  }\n\n}\n\nexport default chat;","map":{"version":3,"sources":["F:/JAVA_WORKSPACE/frontend_react-20191018T023535Z-001/frontend_react/src/components/chat/chat.js"],"names":["React","Component","Input","Table","SockJsClient","UsernameGenerator","Fetch","TalkBox","randomstring","UserOutlined","api","chat","constructor","props","context","onMessageReceive","msg","topic","author","nickName","randomUserName","setState","prevState","messages","box","scrollToBottom","cnt","list","dataSource","sendMessage","selfMsg","Date","getTime","s","name","session","content","timestamp","clientRef","JSON","stringify","e","nickChange","input","target","value","generateUsername","columns","title","dataIndex","key","state","ip","clientConnected","componentDidMount","history","reqIp","gethistory","then","response","status","console","log","data","forEach","item","idx","push","catch","error","render","wsSourceUrl","updateInputValue","ref","client"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {Input,Table} from 'antd';\r\nimport './chat.css';\r\nimport SockJsClient  from \"react-stomp\";\r\nimport UsernameGenerator from \"username-generator\";\r\nimport Fetch from \"json-fetch\";\r\nimport { TalkBox } from \"react-talk\";\r\nimport randomstring from\"randomstring\";\r\nimport { UserOutlined } from '@ant-design/icons';\r\nimport * as api from 'lib/api';\r\n\r\n\r\nclass chat extends Component {\r\n\r\n    constructor(props, context) {\r\n        super(props);\r\n\r\n        this.randomUserName = UsernameGenerator.generateUsername(\"-\");\r\n        // this.randomUserId = randomstring.generate();\r\n        this.nickName = \"\";\r\n        this.box=null;\r\n         this.cnt=0;\r\n\r\n          this.columns = [\r\n          {\r\n            title: 'Ip Address',\r\n            dataIndex: 'ip',\r\n           // key: 'ip',\r\n          },\r\n           {\r\n            title: 'Session id',\r\n            dataIndex: 'sessionId',\r\n            key: 'sessionId',\r\n          }\r\n        \r\n        ];\r\n\r\n       this.state = {\r\n            ip : null,\r\n            clientConnected:false,\r\n            messages: [\r\n            //     {\r\n\r\n            //     \"author\": \"Ponger\",\r\n            //     \"authorId\": \"pong3\",\r\n            //     \"message\": \"How you doin'!\",\r\n            //     \"timestamp\": new Date().getTime()\r\n            // },\r\n            // {\r\n            //     \"author\": \"Ponger2\",\r\n            //     \"authorId\": \"pong4\",\r\n            //     \"message\": \"zzz!\",\r\n            //     \"timestamp\": Date.now().toString()\r\n            // }\r\n        ]\r\n            \r\n        }\r\n    }\r\n    \r\n\r\n\r\n      componentDidMount() {\r\n        var history=[] ;\r\n        var reqIp ;\r\n          api.gethistory().then(function (response) {\r\n            if(response.status == 200)\r\n            {\r\n              debugger;\r\n              console.log(response)\r\n              if(response.data.history)\r\n               response.data.history.forEach((item,idx)=>{\r\n                history.push({\r\n                  \"author\":item[\"author\"],\r\n                  \"authorId\":item[\"authorId\"],\r\n                  \"message\":item[\"message\"],\r\n                  \"timestamp\":item[\"timestamp\"]\r\n                })\r\n              });\r\n              reqIp= response.data.ip;\r\n            }else{\r\n            \r\n            }\r\n          })\r\n          .catch(function (error) {\r\n            console.log(error);\r\n          });\r\n\r\n          this.setState({\r\n            messages: history,\r\n            ip : reqIp\r\n          })\r\n\r\n      }\r\n\r\n          onMessageReceive = (msg, topic) => {\r\n            if(msg.author !== (this.nickName ? this.nickName  : this.randomUserName))\r\n            this.setState(prevState => ({\r\n              messages: [...prevState.messages, msg]\r\n            }));\r\n\r\n              if(this.box)\r\n              this.box.scrollToBottom();\r\n\r\n              if(msg.cnt){\r\n                this.cnt = msg.cnt;\r\n              }\r\n              if(msg.list){\r\n                this.setState(\r\n                  {dataSource:msg.list}\r\n                )\r\n                //this.dataSource=msg.list;\r\n              }\r\n           // this.scrollToBottom();\r\n            //$('.talk-box-body').animate({scrollTop: $('.talk-box-body').scrollHeight})\r\n            \r\n          }\r\n\r\n          sendMessage = (msg, selfMsg) => {\r\n            // selfMsg is the message object constructed from the message typed by the current user\r\n            // NOTE: selfMsg doesn't include timestamp and needs to be added by the user of the module\r\n            // in client or server side as required\r\n\r\n            selfMsg[\"timestamp\"] = new Date().getTime();\r\n            this.setState(prevState => ({\r\n                messages: [...prevState.messages, selfMsg]\r\n            }));\r\n            // If message sending failed return false otherwise return true\r\n            try {\r\n              // Insert code to send the message below\r\n\r\n              const s = {name: this.nickName ? this.nickName  : selfMsg.author, session: \"0\", content: msg,timestamp:selfMsg[\"timestamp\"]}\r\n              this.clientRef.sendMessage(\"/app/hello\", JSON.stringify(s));\r\n              \r\n              return true;\r\n            } catch (e) {\r\n              return false;\r\n            }\r\n          }\r\n\r\n          nickChange = (input)=>{\r\n            this.nickName  = input.target.value\r\n          }\r\n      \r\n\r\n    render() {\r\n      \r\n        //console.log(\"chat렌더!\")\r\n        console.log(this.state.ip)\r\n        const wsSourceUrl = \"http://10.51.15.31:8076/chat\";\r\n        return (\r\n            <div id=\"chat-viewer\">\r\n                <div id=\"nic-name\">\r\n                <Input size=\"large\" placeholder=\"닉네임을 입력하세요\" prefix={<UserOutlined />} onChange={this.nickChange}/>\r\n                </div>\r\n                <div id=\"chat-content\">\r\n            <TalkBox topic=\"대화방ㅎㅎ\" currentUserId={ this.state.ip }\r\n                currentUser={this.nickName ? this.nickName  : this.randomUserName} messages={this.state.messages}\r\n               onSendMessage={ this.sendMessage } connected={this.state.clientConnected}\r\n               onKeyDown={this.updateInputValue}\r\n               ref={ref => {\r\n                this.box = ref;\r\n              }}\r\n               />\r\n               \r\n               <div id='chat-connect-list'>\r\n          <Table dataSource={this.state.dataSource} columns={this.columns} />\r\n               현재입장인원:{this.cnt}\r\n               </div>\r\n            <SockJsClient\r\n            url={wsSourceUrl}\r\n            topics={[\"/topics/testchat\"]}\r\n            onMessage={this.onMessageReceive }\r\n            ref={(client) => { this.clientRef = client; }} \r\n            onConnect={ () => {this.setState({ clientConnected: true }) } }\r\n            onDisconnect={ () => { this.setState({ clientConnected: false }) } }\r\n            />\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default chat;"]},"metadata":{},"sourceType":"module"}