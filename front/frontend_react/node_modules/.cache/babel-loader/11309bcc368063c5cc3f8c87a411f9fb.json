{"ast":null,"code":"var _jsxFileName = \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\src\\\\components\\\\chat\\\\chat.js\";\nimport React, { Component } from 'react';\nimport { Input } from 'antd';\nimport './chat.css';\nimport SockJsClient from \"react-stomp\";\nimport UsernameGenerator from \"username-generator\";\nimport Fetch from \"json-fetch\";\nimport { TalkBox } from \"react-talk\";\nimport randomstring from \"randomstring\";\n\nclass chat extends Component {\n  constructor(props, context) {\n    super(props);\n    this.state = {\n      messages: \"\",\n      clientConnected: false\n    };\n\n    this.sendMessage2 = e => {\n      //  console.log(e.key)\n      if (e.key === 'Enter') {\n        const s = {\n          name: \"USER\",\n          session: \"0\",\n          content: this.state.messages\n        };\n        this.clientRef.sendMessage(\"/app/hello\", JSON.stringify(s));\n      }\n    };\n\n    this.updateInputValue = evt => {\n      //console.log(evt);\n      //console.log(evt.target.value)\n      this.setState({\n        text: evt.target.value\n      });\n    };\n\n    this.sendMessage2 = (msg, selfMsg) => {\n      // selfMsg is the message object constructed from the message typed by the current user\n      // NOTE: selfMsg doesn't include timestamp and needs to be added by the user of the module\n      // in client or server side as required\n      selfMsg[\"timestamp\"] = Date.now().toString();\n      this.setState(prevState => ({\n        messages: [...prevState.messages, selfMsg]\n      })); // If message sending failed return false otherwise return true\n\n      try {\n        // Insert code to send the message below\n        return true;\n      } catch (e) {\n        return false;\n      }\n    };\n  }\n\n  render() {\n    const wsSourceUrl = \"http://localhost:8076/chat\";\n    const Search = Input.Search;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TalkBox, {\n      topic: \"/topic/testchat\",\n      currentUserId: \"123\",\n      currentUser: \"123\",\n      messages: this.state.messages,\n      onSendMessage: this.sendMessage2,\n      connected: this.state.clientConnected,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(SockJsClient, {\n      url: \"http://localhost:8076/chat\",\n      topics: [\"/topics/testchat\"],\n      onMessage: msg => {\n        console.log(msg);\n      },\n      ref: client => {\n        this.clientRef = client;\n      },\n      onConnect: () => {\n        this.setState({\n          clientConnected: true\n        });\n      },\n      onDisconnect: () => {\n        this.setState({\n          clientConnected: false\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onKeyDown: this.sendMessage,\n      onChange: this.updateInputValue,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    })) //     <div>\n    //     <TalkBox topic=\"/topic/public\" currentUserId={ this.randomUserId }\n    //       currentUser={ this.randomUserName } messages={ this.state.messages }\n    //       onSendMessage={ this.sendMessage } connected={ this.state.clientConnected }/>\n    //     <SockJsClient url={ wsSourceUrl } topics={[\"/topic/public\"]}\n    //       onMessage={ this.onMessageReceive } ref={ (client) => { this.clientRef = client }}\n    //       onConnect={ () => {this.setState({ clientConnected: true }) } }\n    //       onDisconnect={ () => { this.setState({ clientConnected: false }) } }\n    //       debug={ false } style={[{width:'100%', height:'100%'}]}/>\n    //   </div>\n    // <div>\n    //     <div id=\"container\">\n    //         <div id=\"chatView\">\n    //             <div class=\"msg\" id=\"chat-me\">\n    //                 정영석\n    //             <li class=\"msgBox\">채팅1</li>\n    //             </div>\n    //             <div class=\"msg\" id=\"chat-other\">\n    //                 남영덕\n    //             <li class=\"msgBox\">채팅2</li>\n    //             </div>\n    //             <div class=\"msg\" id=\"chat-other\">\n    //                 최기석\n    //             <li class=\"msgBox\">채팅3</li>\n    //             </div>\n    //         </div>\n    //         <Search\n    //                 placeholder=\"보낼 메시지를 입력하세요\"\n    //                 enterButton=\"보내기\"\n    //                 size=\"large\"\n    //                 onSearch={value => console.log(value)}\n    //         />\n    //     </div>  \n    // </div>\n    ;\n  }\n\n}\n\nexport default chat;","map":{"version":3,"sources":["F:/JAVA_WORKSPACE/frontend_react-20191018T023535Z-001/frontend_react/src/components/chat/chat.js"],"names":["React","Component","Input","SockJsClient","UsernameGenerator","Fetch","TalkBox","randomstring","chat","constructor","props","context","state","messages","clientConnected","sendMessage2","e","key","s","name","session","content","clientRef","sendMessage","JSON","stringify","updateInputValue","evt","setState","text","target","value","msg","selfMsg","Date","now","toString","prevState","render","wsSourceUrl","Search","console","log","client"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {Input} from 'antd';\r\nimport './chat.css';\r\nimport SockJsClient  from \"react-stomp\";\r\nimport UsernameGenerator from \"username-generator\";\r\nimport Fetch from \"json-fetch\";\r\nimport { TalkBox } from \"react-talk\";\r\nimport randomstring from\"randomstring\";\r\n\r\n\r\nclass chat extends Component {\r\n\r\n    constructor(props, context) {\r\n        super(props);\r\n    }\r\n\r\n    state = {\r\n        messages : \"\",\r\n        clientConnected:false\r\n        \r\n    }\r\n\r\n\r\n\r\n\r\n    //   componentWillMount() {\r\n    //     console.log(\"call history\");\r\n    //     Fetch(\"/history\", {\r\n    //       method: \"GET\"\r\n    //     }).then((response) => {\r\n    //       this.setState({ messages: response.body });\r\n    //     });\r\n    //   }\r\n    \r\n    sendMessage2 = (e) => {\r\n      //  console.log(e.key)\r\n        if (e.key ==='Enter') {\r\n\r\n            const s = {name: \"USER\", session: \"0\", content: this.state.messages}\r\n            this.clientRef.sendMessage(\"/app/hello\", JSON.stringify(s));\r\n       }\r\n\r\n        }\r\n    \r\n        updateInputValue = (evt) =>{\r\n            //console.log(evt);\r\n            //console.log(evt.target.value)\r\n            this.setState({\r\n                text: evt.target.value\r\n            });\r\n            \r\n          }\r\n\r\n          sendMessage2 = (msg, selfMsg) => {\r\n            // selfMsg is the message object constructed from the message typed by the current user\r\n            // NOTE: selfMsg doesn't include timestamp and needs to be added by the user of the module\r\n            // in client or server side as required\r\n            selfMsg[\"timestamp\"] = Date.now().toString();\r\n            this.setState(prevState => ({\r\n                messages: [...prevState.messages, selfMsg]\r\n            }));\r\n            // If message sending failed return false otherwise return true\r\n            try {\r\n              // Insert code to send the message below\r\n              return true;\r\n            } catch (e) {\r\n              return false;\r\n            }\r\n          }\r\n      \r\n\r\n    render() {\r\n\r\n        const wsSourceUrl = \"http://localhost:8076/chat\";\r\n         const { Search } = Input;\r\n        return (\r\n            <div>\r\n            <TalkBox topic=\"/topic/testchat\" currentUserId=\"123\"\r\n                currentUser=\"123\" messages={ this.state.messages }\r\n               onSendMessage={ this.sendMessage2 } connected={ this.state.clientConnected }/>\r\n            <SockJsClient\r\n            url=\"http://localhost:8076/chat\"\r\n            topics={[\"/topics/testchat\"]}\r\n            onMessage={(msg) => { console.log(msg); }}\r\n            ref={(client) => { this.clientRef = client; }} \r\n            onConnect={ () => {this.setState({ clientConnected: true }) } }\r\n            onDisconnect={ () => { this.setState({ clientConnected: false }) } }\r\n            />\r\n\r\n            <input type=\"text\" onKeyDown={this.sendMessage} onChange={this.updateInputValue}></input>\r\n            </div>\r\n\r\n        //     <div>\r\n        //     <TalkBox topic=\"/topic/public\" currentUserId={ this.randomUserId }\r\n        //       currentUser={ this.randomUserName } messages={ this.state.messages }\r\n        //       onSendMessage={ this.sendMessage } connected={ this.state.clientConnected }/>\r\n            \r\n        //     <SockJsClient url={ wsSourceUrl } topics={[\"/topic/public\"]}\r\n        //       onMessage={ this.onMessageReceive } ref={ (client) => { this.clientRef = client }}\r\n        //       onConnect={ () => {this.setState({ clientConnected: true }) } }\r\n        //       onDisconnect={ () => { this.setState({ clientConnected: false }) } }\r\n        //       debug={ false } style={[{width:'100%', height:'100%'}]}/>\r\n        //   </div>\r\n            // <div>\r\n            //     <div id=\"container\">\r\n            //         <div id=\"chatView\">\r\n            //             <div class=\"msg\" id=\"chat-me\">\r\n            //                 정영석\r\n            //             <li class=\"msgBox\">채팅1</li>\r\n            //             </div>\r\n            //             <div class=\"msg\" id=\"chat-other\">\r\n            //                 남영덕\r\n            //             <li class=\"msgBox\">채팅2</li>\r\n            //             </div>\r\n            //             <div class=\"msg\" id=\"chat-other\">\r\n            //                 최기석\r\n            //             <li class=\"msgBox\">채팅3</li>\r\n            //             </div>\r\n            //         </div>\r\n            //         <Search\r\n            //                 placeholder=\"보낼 메시지를 입력하세요\"\r\n            //                 enterButton=\"보내기\"\r\n            //                 size=\"large\"\r\n            //                 onSearch={value => console.log(value)}\r\n            //         />\r\n            //     </div>  \r\n            // </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default chat;"]},"metadata":{},"sourceType":"module"}