{"ast":null,"code":"var _jsxFileName = \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\src\\\\components\\\\chat\\\\chat.js\";\nimport React, { Component } from 'react';\nimport { Input } from 'antd';\nimport './chat.css';\nimport SockJsClient from \"react-stomp\";\nimport UsernameGenerator from \"username-generator\";\nimport Fetch from \"json-fetch\";\nimport { TalkBox } from \"react-talk\";\nimport randomstring from \"randomstring\";\n\nclass chat extends Component {\n  constructor(props, context) {\n    super(props);\n\n    this.onMessageReceive = (msg, topic) => {\n      this.setState(prevState => ({\n        messages: [...prevState.messages, msg]\n      }));\n    };\n\n    this.sendMessage = (msg, selfMsg) => {\n      try {\n        var send_message = {\n          \"user\": selfMsg.author,\n          \"message\": selfMsg.message\n        };\n        this.clientRef.sendMessage(\"/app/message\", JSON.stringify(send_message));\n        return true;\n      } catch (e) {\n        return false;\n      }\n    };\n\n    this.randomUserName = UsernameGenerator.generateUsername(\"-\");\n    this.randomUserId = randomstring.generate();\n    this.sendURL = \"/message\";\n    this.state = {\n      clientConnected: false,\n      messages: []\n    };\n  }\n\n  componentWillMount() {\n    console.log(\"call history\");\n    Fetch(\"/history\", {\n      method: \"GET\"\n    }).then(response => {\n      this.setState({\n        messages: response.body\n      });\n    });\n  }\n\n  render() {\n    const wsSourceUrl = \"http://localhost:8076/chat\";\n    const Search = Input.Search;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }\n    }, \"\\u314E\\u3147\\u314E\\u3147\", /*#__PURE__*/React.createElement(SockJsClient, {\n      url: wsSourceUrl,\n      topics: [\"/topic/public\"],\n      onMessage: this.onMessageReceive,\n      ref: client => {\n        this.clientRef = client;\n      },\n      onConnect: () => {\n        this.setState({\n          clientConnected: true\n        });\n      },\n      onDisconnect: () => {\n        this.setState({\n          clientConnected: false\n        });\n      },\n      debug: false,\n      style: [{\n        width: '100%',\n        height: '100%'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }\n    })) // <div>\n    //     <div id=\"container\">\n    //         <div id=\"chatView\">\n    //             <div class=\"msg\" id=\"chat-me\">\n    //                 정영석\n    //             <li class=\"msgBox\">채팅1</li>\n    //             </div>\n    //             <div class=\"msg\" id=\"chat-other\">\n    //                 남영덕\n    //             <li class=\"msgBox\">채팅2</li>\n    //             </div>\n    //             <div class=\"msg\" id=\"chat-other\">\n    //                 최기석\n    //             <li class=\"msgBox\">채팅3</li>\n    //             </div>\n    //         </div>\n    //         <Search\n    //                 placeholder=\"보낼 메시지를 입력하세요\"\n    //                 enterButton=\"보내기\"\n    //                 size=\"large\"\n    //                 onSearch={value => console.log(value)}\n    //         />\n    //     </div>  \n    // </div>\n    ;\n  }\n\n}\n\nexport default chat;","map":{"version":3,"sources":["F:/JAVA_WORKSPACE/frontend_react-20191018T023535Z-001/frontend_react/src/components/chat/chat.js"],"names":["React","Component","Input","SockJsClient","UsernameGenerator","Fetch","TalkBox","randomstring","chat","constructor","props","context","onMessageReceive","msg","topic","setState","prevState","messages","sendMessage","selfMsg","send_message","author","message","clientRef","JSON","stringify","e","randomUserName","generateUsername","randomUserId","generate","sendURL","state","clientConnected","componentWillMount","console","log","method","then","response","body","render","wsSourceUrl","Search","client","width","height"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {Input} from 'antd';\r\nimport './chat.css';\r\nimport SockJsClient from \"react-stomp\";\r\nimport UsernameGenerator from \"username-generator\";\r\nimport Fetch from \"json-fetch\";\r\nimport { TalkBox } from \"react-talk\";\r\nimport randomstring from\"randomstring\";\r\n\r\n\r\nclass chat extends Component {\r\n\r\n    constructor(props, context) {\r\n        super(props);\r\n\r\n        this.randomUserName = UsernameGenerator.generateUsername(\"-\");\r\n        this.randomUserId = randomstring.generate();\r\n        this.sendURL = \"/message\";\r\n        this.state = {\r\n        clientConnected : false,\r\n        messages : []\r\n        };\r\n    }\r\n\r\n    onMessageReceive = (msg, topic) => {\r\n        this.setState(prevState => ({\r\n          messages: [...prevState.messages, msg]\r\n        }));\r\n      }\r\n    \r\n      sendMessage = (msg, selfMsg) => {\r\n        try {\r\n          var send_message = {\r\n            \"user\" : selfMsg.author,\r\n            \"message\" : selfMsg.message\r\n          }\r\n          this.clientRef.sendMessage(\"/app/message\", JSON.stringify(send_message));\r\n          return true;\r\n        } catch(e) {\r\n          return false;\r\n        }\r\n      }\r\n    \r\n\r\n      componentWillMount() {\r\n        console.log(\"call history\");\r\n        Fetch(\"/history\", {\r\n          method: \"GET\"\r\n        }).then((response) => {\r\n          this.setState({ messages: response.body });\r\n        });\r\n      }\r\n    \r\n    \r\n\r\n    render() {\r\n\r\n        const wsSourceUrl = \"http://localhost:8076/chat\";\r\n         const { Search } = Input;\r\n        return (\r\n            <div>\r\n                ㅎㅇㅎㅇ\r\n            {/* <TalkBox topic=\"/topic/public\" currentUserId={ this.randomUserId }\r\n              currentUser={ this.randomUserName } messages={ this.state.messages }\r\n              onSendMessage={ this.sendMessage } connected={ this.state.clientConnected }/> */}\r\n            \r\n            <SockJsClient url={ wsSourceUrl } topics={[\"/topic/public\"]}\r\n              onMessage={ this.onMessageReceive } ref={ (client) => { this.clientRef = client }}\r\n              onConnect={ () => {this.setState({ clientConnected: true }) } }\r\n              onDisconnect={ () => { this.setState({ clientConnected: false }) } }\r\n              debug={ false } style={[{width:'100%', height:'100%'}]}/>\r\n          </div>\r\n            // <div>\r\n            //     <div id=\"container\">\r\n            //         <div id=\"chatView\">\r\n            //             <div class=\"msg\" id=\"chat-me\">\r\n            //                 정영석\r\n            //             <li class=\"msgBox\">채팅1</li>\r\n            //             </div>\r\n            //             <div class=\"msg\" id=\"chat-other\">\r\n            //                 남영덕\r\n            //             <li class=\"msgBox\">채팅2</li>\r\n            //             </div>\r\n            //             <div class=\"msg\" id=\"chat-other\">\r\n            //                 최기석\r\n            //             <li class=\"msgBox\">채팅3</li>\r\n            //             </div>\r\n            //         </div>\r\n            //         <Search\r\n            //                 placeholder=\"보낼 메시지를 입력하세요\"\r\n            //                 enterButton=\"보내기\"\r\n            //                 size=\"large\"\r\n            //                 onSearch={value => console.log(value)}\r\n            //         />\r\n            //     </div>  \r\n            // </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default chat;"]},"metadata":{},"sourceType":"module"}