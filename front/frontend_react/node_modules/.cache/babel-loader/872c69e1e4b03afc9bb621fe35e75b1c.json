{"ast":null,"code":"var assert = require('./assert');\n\nvar isTypeName = require('./isTypeName');\n\nvar isFunction = require('./isFunction');\n\nvar getTypeName = require('./getTypeName');\n\nvar isIdentity = require('./isIdentity');\n\nvar isArray = require('./isArray');\n\nvar create = require('./create');\n\nvar is = require('./is');\n\nfunction getDefaultName(types) {\n  return '[' + types.map(getTypeName).join(', ') + ']';\n}\n\nfunction tuple(types, name) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isArray(types) && types.every(isFunction), function () {\n      return 'Invalid argument types ' + assert.stringify(types) + ' supplied to tuple(types, [name]) combinator (expected an array of types)';\n    });\n    assert(isTypeName(name), function () {\n      return 'Invalid argument name ' + assert.stringify(name) + ' supplied to tuple(types, [name]) combinator (expected a string)';\n    });\n  }\n\n  var displayName = name || getDefaultName(types);\n  var identity = types.every(isIdentity);\n\n  function Tuple(value, path) {\n    if (process.env.NODE_ENV === 'production') {\n      if (identity) {\n        return value;\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      path = path || [displayName];\n      assert(isArray(value) && value.length === types.length, function () {\n        return 'Invalid value ' + assert.stringify(value) + ' supplied to ' + path.join('/') + ' (expected an array of length ' + types.length + ')';\n      });\n    }\n\n    var idempotent = true;\n    var ret = [];\n\n    for (var i = 0, len = types.length; i < len; i++) {\n      var expected = types[i];\n      var actual = value[i];\n      var instance = create(expected, actual, process.env.NODE_ENV !== 'production' ? path.concat(i + ': ' + getTypeName(expected)) : null);\n      idempotent = idempotent && actual === instance;\n      ret.push(instance);\n    }\n\n    if (idempotent) {\n      // implements idempotency\n      ret = value;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      Object.freeze(ret);\n    }\n\n    return ret;\n  }\n\n  Tuple.meta = {\n    kind: 'tuple',\n    types: types,\n    name: name,\n    identity: identity\n  };\n  Tuple.displayName = displayName;\n\n  Tuple.is = function (x) {\n    return isArray(x) && x.length === types.length && types.every(function (type, i) {\n      return is(x[i], type);\n    });\n  };\n\n  Tuple.update = function (instance, patch) {\n    return Tuple(assert.update(instance, patch));\n  };\n\n  return Tuple;\n}\n\ntuple.getDefaultName = getDefaultName;\nmodule.exports = tuple;","map":null,"metadata":{},"sourceType":"script"}