{"ast":null,"code":"import _objectSpread from \"F:\\\\JAVA_WORKSPACE\\\\frontend_react-20191018T023535Z-001\\\\frontend_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { createAction, handleActions } from 'redux-actions';\nimport { Map, List, fromJS } from 'immutable';\nimport { pender } from 'redux-pender';\nimport * as api from 'lib/api';\nconst INITIALIZE = 'record/INITIALIZE';\nconst CHANGE_INPUT = 'record/CHANGE_INPUT';\nconst RECORD_LIST = 'record/RECORD_LIST';\nconst SEARCH_RECORD_LIST = 'record/SEARCH_RECORD_LIST';\nconst GET_RECORD_DATA = 'record/GET_RECORD_DATA';\nexport const initialize = createAction(INITIALIZE);\nexport const changeInput = createAction(CHANGE_INPUT);\nexport const getRecordList = createAction(RECORD_LIST, api.getRecordList);\nexport const getSearchRecordList = createAction(SEARCH_RECORD_LIST, api.getSearchRecordList);\nexport const getRecordData = createAction(GET_RECORD_DATA, api.getRecordData);\nconst initialState = Map({\n  no: 0,\n  day: '',\n  actor: '',\n  id: '',\n  recordType: '전체',\n  recordTypeEn: '',\n  content: '',\n  contentEn: '',\n  read: '전체',\n  insertUserId: '',\n  tables: List(),\n  startdate: '',\n  enddate: '',\n  name: '',\n  badge: '',\n  select: false,\n  changeView: 'table',\n  modal: false,\n  newDay: '',\n  newActor: '',\n  newId: '',\n  newRecordType: '전체',\n  newContent: '',\n  newRead: '전체',\n  subStartdate: '',\n  subEnddate: '',\n  subType: '전체',\n  subRead: '전체',\n  subContent: '',\n  subSelect: false\n});\nexport default handleActions(_objectSpread({\n  [INITIALIZE]: (state, action) => initialState,\n  [CHANGE_INPUT]: (state, action) => {\n    const _action$payload = action.payload,\n          name = _action$payload.name,\n          value = _action$payload.value;\n    return state.set(name, value);\n  }\n}, pender({\n  type: RECORD_LIST,\n  onSuccess: (state, action) => {\n    //console.log(action.payload);\n    const tables = action.payload.data.data;\n    return state.set('tables', fromJS(tables));\n  }\n}), {}, pender({\n  type: SEARCH_RECORD_LIST,\n  onSuccess: (state, action) => {\n    //console.log(action.payload);\n    const tables = action.payload.data.data;\n    return state.set('tables', fromJS(tables));\n  }\n}), {}, pender({\n  type: GET_RECORD_DATA,\n  onSuccess: (state, action) => {\n    const _action$payload$data$ = action.payload.data.data,\n          day = _action$payload$data$.day,\n          actor = _action$payload$data$.actor,\n          id = _action$payload$data$.id,\n          recordType = _action$payload$data$.recordType,\n          recordTypeEn = _action$payload$data$.recordTypeEn,\n          content = _action$payload$data$.content,\n          contentEn = _action$payload$data$.contentEn,\n          read = _action$payload$data$.read,\n          insertUserId = _action$payload$data$.insertUserId;\n    return state.set('day', day).set('actor', actor).set('id', id).set('recordType', recordType).set('recordTypeEn', recordTypeEn).set('content', content).set('contentEn', contentEn).set('read', read).set('insertUserId', insertUserId);\n  }\n})), initialState);","map":{"version":3,"sources":["F:/JAVA_WORKSPACE/frontend_react-20191018T023535Z-001/frontend_react/src/store/modules/record.js"],"names":["createAction","handleActions","Map","List","fromJS","pender","api","INITIALIZE","CHANGE_INPUT","RECORD_LIST","SEARCH_RECORD_LIST","GET_RECORD_DATA","initialize","changeInput","getRecordList","getSearchRecordList","getRecordData","initialState","no","day","actor","id","recordType","recordTypeEn","content","contentEn","read","insertUserId","tables","startdate","enddate","name","badge","select","changeView","modal","newDay","newActor","newId","newRecordType","newContent","newRead","subStartdate","subEnddate","subType","subRead","subContent","subSelect","state","action","payload","value","set","type","onSuccess","data"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\r\n\r\nimport { Map, List, fromJS } from 'immutable';\r\nimport { pender } from 'redux-pender';\r\n\r\nimport * as api from 'lib/api';\r\n\r\nconst INITIALIZE = 'record/INITIALIZE';\r\nconst CHANGE_INPUT = 'record/CHANGE_INPUT';\r\nconst RECORD_LIST = 'record/RECORD_LIST';\r\nconst SEARCH_RECORD_LIST = 'record/SEARCH_RECORD_LIST';\r\nconst GET_RECORD_DATA = 'record/GET_RECORD_DATA';\r\n\r\nexport const initialize = createAction(INITIALIZE);\r\nexport const changeInput = createAction(CHANGE_INPUT);\r\nexport const getRecordList = createAction(RECORD_LIST, api.getRecordList);\r\nexport const getSearchRecordList = createAction(SEARCH_RECORD_LIST, api.getSearchRecordList);\r\nexport const getRecordData = createAction(GET_RECORD_DATA, api.getRecordData);\r\n\r\nconst initialState = Map({\r\n    no: 0,\r\n    day: '',\r\n    actor: '',\r\n    id: '',\r\n    recordType: '전체',\r\n    recordTypeEn: '',\r\n    content: '',\r\n    contentEn: '',\r\n    read: '전체',\r\n    insertUserId: '',\r\n    tables: List(),\r\n    startdate: '',\r\n    enddate: '',\r\n    name: '',\r\n    badge: '',\r\n    select: false,\r\n    changeView: 'table',\r\n    modal: false,\r\n    newDay: '',\r\n    newActor: '',\r\n    newId: '',\r\n    newRecordType: '전체',\r\n    newContent: '',\r\n    newRead: '전체',\r\n    subStartdate: '',\r\n    subEnddate: '',\r\n    subType: '전체',\r\n    subRead: '전체',\r\n    subContent: '',\r\n    subSelect: false\r\n});\r\n\r\nexport default handleActions({\r\n    [INITIALIZE]: (state, action) => initialState,\r\n    [CHANGE_INPUT]: (state, action) => {\r\n        const {name, value} = action.payload;\r\n        return state.set(name, value);\r\n    },\r\n    ...pender({\r\n        type: RECORD_LIST,\r\n        onSuccess: (state, action) => {\r\n            //console.log(action.payload);\r\n\r\n            const { data : tables } = action.payload.data;\r\n\r\n            return state.set('tables', fromJS(tables));\r\n        }\r\n    }),\r\n    ...pender({\r\n        type: SEARCH_RECORD_LIST,\r\n        onSuccess: (state, action) => {\r\n            //console.log(action.payload);\r\n\r\n            const {data : tables} = action.payload.data;\r\n\r\n            return state.set('tables', fromJS(tables));\r\n        }\r\n    }),\r\n    ...pender({\r\n        type: GET_RECORD_DATA,\r\n        onSuccess: (state, action) => {\r\n            const {day, actor, id, recordType, recordTypeEn, content, contentEn, read, insertUserId} = action.payload.data.data;\r\n\r\n            return state.set('day', day)\r\n                        .set('actor', actor)\r\n                        .set('id', id)\r\n                        .set('recordType', recordType)\r\n                        .set('recordTypeEn', recordTypeEn)\r\n                        .set('content', content)\r\n                        .set('contentEn', contentEn)\r\n                        .set('read', read)\r\n                        .set('insertUserId', insertUserId);\r\n        }\r\n    })\r\n}, initialState);\r\n\r\n"]},"metadata":{},"sourceType":"module"}